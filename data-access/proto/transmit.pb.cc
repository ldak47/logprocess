// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transmit.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "transmit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace process {

namespace {

const ::google::protobuf::Descriptor* MapEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransmitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransmitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransmitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransmitResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransmitResponse_Res_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SrcidConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrcidConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanCondSeWord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanCondSeWord_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CookieConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CookieConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckListCond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckListCond_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetCheckListConfigRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetCheckListConfigRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetCheckListConfigResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetCheckListConfigResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SetCheckListConfigResponse_Res_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetCheckListConfigRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCheckListConfigRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCheckListConfigResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCheckListConfigResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetCheckListConfigResponse_Res_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetLogProcessStatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLogProcessStatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLogProcessStatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLogProcessStatResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetLogProcessStatResponse_Res_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CondType_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* ProcessService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_transmit_2eproto() {
  protobuf_AddDesc_transmit_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "transmit.proto");
  GOOGLE_CHECK(file != NULL);
  MapEntry_descriptor_ = file->message_type(0);
  static const int MapEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, value_),
  };
  MapEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapEntry_descriptor_,
      MapEntry::default_instance_,
      MapEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapEntry));
  TransmitRequest_descriptor_ = file->message_type(1);
  static const int TransmitRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitRequest, values_),
  };
  TransmitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransmitRequest_descriptor_,
      TransmitRequest::default_instance_,
      TransmitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransmitRequest));
  TransmitResponse_descriptor_ = file->message_type(2);
  static const int TransmitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitResponse, error_),
  };
  TransmitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransmitResponse_descriptor_,
      TransmitResponse::default_instance_,
      TransmitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransmitResponse));
  TransmitResponse_Res_Status_descriptor_ = TransmitResponse_descriptor_->enum_type(0);
  SrcidConfig_descriptor_ = file->message_type(3);
  static const int SrcidConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcidConfig, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcidConfig, cond_),
  };
  SrcidConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrcidConfig_descriptor_,
      SrcidConfig::default_instance_,
      SrcidConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcidConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcidConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrcidConfig));
  ScanCondSeWord_descriptor_ = file->message_type(4);
  static const int ScanCondSeWord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanCondSeWord, searchword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanCondSeWord, cond_),
  };
  ScanCondSeWord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanCondSeWord_descriptor_,
      ScanCondSeWord::default_instance_,
      ScanCondSeWord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanCondSeWord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanCondSeWord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanCondSeWord));
  LocationInfo_descriptor_ = file->message_type(5);
  static const int LocationInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, cond_),
  };
  LocationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocationInfo_descriptor_,
      LocationInfo::default_instance_,
      LocationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocationInfo));
  CookieConfig_descriptor_ = file->message_type(6);
  static const int CookieConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookieConfig, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookieConfig, cond_),
  };
  CookieConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CookieConfig_descriptor_,
      CookieConfig::default_instance_,
      CookieConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookieConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookieConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CookieConfig));
  ClusterConfig_descriptor_ = file->message_type(7);
  static const int ClusterConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, cond_),
  };
  ClusterConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClusterConfig_descriptor_,
      ClusterConfig::default_instance_,
      ClusterConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClusterConfig));
  CheckListCond_descriptor_ = file->message_type(8);
  static const int CheckListCond_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckListCond, srcids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckListCond, sewords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckListCond, lbs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckListCond, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckListCond, cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckListCond, res_srcid_),
  };
  CheckListCond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckListCond_descriptor_,
      CheckListCond::default_instance_,
      CheckListCond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckListCond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckListCond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckListCond));
  SetCheckListConfigRequest_descriptor_ = file->message_type(9);
  static const int SetCheckListConfigRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCheckListConfigRequest, application_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCheckListConfigRequest, cond_),
  };
  SetCheckListConfigRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetCheckListConfigRequest_descriptor_,
      SetCheckListConfigRequest::default_instance_,
      SetCheckListConfigRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCheckListConfigRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCheckListConfigRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetCheckListConfigRequest));
  SetCheckListConfigResponse_descriptor_ = file->message_type(10);
  static const int SetCheckListConfigResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCheckListConfigResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCheckListConfigResponse, error_),
  };
  SetCheckListConfigResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetCheckListConfigResponse_descriptor_,
      SetCheckListConfigResponse::default_instance_,
      SetCheckListConfigResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCheckListConfigResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCheckListConfigResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetCheckListConfigResponse));
  SetCheckListConfigResponse_Res_Status_descriptor_ = SetCheckListConfigResponse_descriptor_->enum_type(0);
  GetCheckListConfigRequest_descriptor_ = file->message_type(11);
  static const int GetCheckListConfigRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckListConfigRequest, application_),
  };
  GetCheckListConfigRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCheckListConfigRequest_descriptor_,
      GetCheckListConfigRequest::default_instance_,
      GetCheckListConfigRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckListConfigRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckListConfigRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCheckListConfigRequest));
  GetCheckListConfigResponse_descriptor_ = file->message_type(12);
  static const int GetCheckListConfigResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckListConfigResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckListConfigResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckListConfigResponse, cond_),
  };
  GetCheckListConfigResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCheckListConfigResponse_descriptor_,
      GetCheckListConfigResponse::default_instance_,
      GetCheckListConfigResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckListConfigResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCheckListConfigResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCheckListConfigResponse));
  GetCheckListConfigResponse_Res_Status_descriptor_ = GetCheckListConfigResponse_descriptor_->enum_type(0);
  GetLogProcessStatRequest_descriptor_ = file->message_type(13);
  static const int GetLogProcessStatRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogProcessStatRequest, application_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogProcessStatRequest, startime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogProcessStatRequest, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogProcessStatRequest, startindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogProcessStatRequest, endindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogProcessStatRequest, cond_),
  };
  GetLogProcessStatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLogProcessStatRequest_descriptor_,
      GetLogProcessStatRequest::default_instance_,
      GetLogProcessStatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogProcessStatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogProcessStatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLogProcessStatRequest));
  GetLogProcessStatResponse_descriptor_ = file->message_type(14);
  static const int GetLogProcessStatResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogProcessStatResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogProcessStatResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogProcessStatResponse, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogProcessStatResponse, iteminfos_),
  };
  GetLogProcessStatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLogProcessStatResponse_descriptor_,
      GetLogProcessStatResponse::default_instance_,
      GetLogProcessStatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogProcessStatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogProcessStatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLogProcessStatResponse));
  GetLogProcessStatResponse_Res_Status_descriptor_ = GetLogProcessStatResponse_descriptor_->enum_type(0);
  CondType_descriptor_ = file->enum_type(0);
  ProcessService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_transmit_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapEntry_descriptor_, &MapEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransmitRequest_descriptor_, &TransmitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransmitResponse_descriptor_, &TransmitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrcidConfig_descriptor_, &SrcidConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanCondSeWord_descriptor_, &ScanCondSeWord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocationInfo_descriptor_, &LocationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CookieConfig_descriptor_, &CookieConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClusterConfig_descriptor_, &ClusterConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckListCond_descriptor_, &CheckListCond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetCheckListConfigRequest_descriptor_, &SetCheckListConfigRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetCheckListConfigResponse_descriptor_, &SetCheckListConfigResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCheckListConfigRequest_descriptor_, &GetCheckListConfigRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCheckListConfigResponse_descriptor_, &GetCheckListConfigResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLogProcessStatRequest_descriptor_, &GetLogProcessStatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLogProcessStatResponse_descriptor_, &GetLogProcessStatResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_transmit_2eproto() {
  delete MapEntry::default_instance_;
  delete MapEntry_reflection_;
  delete TransmitRequest::default_instance_;
  delete TransmitRequest_reflection_;
  delete TransmitResponse::default_instance_;
  delete TransmitResponse_reflection_;
  delete SrcidConfig::default_instance_;
  delete SrcidConfig_reflection_;
  delete ScanCondSeWord::default_instance_;
  delete ScanCondSeWord_reflection_;
  delete LocationInfo::default_instance_;
  delete LocationInfo_reflection_;
  delete CookieConfig::default_instance_;
  delete CookieConfig_reflection_;
  delete ClusterConfig::default_instance_;
  delete ClusterConfig_reflection_;
  delete CheckListCond::default_instance_;
  delete CheckListCond_reflection_;
  delete SetCheckListConfigRequest::default_instance_;
  delete SetCheckListConfigRequest_reflection_;
  delete SetCheckListConfigResponse::default_instance_;
  delete SetCheckListConfigResponse_reflection_;
  delete GetCheckListConfigRequest::default_instance_;
  delete GetCheckListConfigRequest_reflection_;
  delete GetCheckListConfigResponse::default_instance_;
  delete GetCheckListConfigResponse_reflection_;
  delete GetLogProcessStatRequest::default_instance_;
  delete GetLogProcessStatRequest_reflection_;
  delete GetLogProcessStatResponse::default_instance_;
  delete GetLogProcessStatResponse_reflection_;
}

void protobuf_AddDesc_transmit_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016transmit.proto\022\007process\"&\n\010MapEntry\022\013\n"
    "\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"4\n\017TransmitReq"
    "uest\022!\n\006values\030\001 \003(\0132\021.process.MapEntry\""
    "~\n\020TransmitResponse\0224\n\006status\030\001 \002(\0162$.pr"
    "ocess.TransmitResponse.Res_Status\022\r\n\005err"
    "or\030\002 \001(\t\"%\n\nRes_Status\022\013\n\007SUCCEED\020\000\022\n\n\006F"
    "AILED\020\001\"=\n\013SrcidConfig\022\r\n\005srcid\030\001 \002(\t\022\037\n"
    "\004cond\030\002 \002(\0162\021.process.CondType\"E\n\016ScanCo"
    "ndSeWord\022\022\n\nsearchword\030\001 \002(\t\022\037\n\004cond\030\002 \002"
    "(\0162\021.process.CondType\"O\n\014LocationInfo\022\020\n"
    "\010province\030\001 \001(\t\022\014\n\004city\030\002 \001(\t\022\037\n\004cond\030\003 "
    "\002(\0162\021.process.CondType\"\?\n\014CookieConfig\022\016"
    "\n\006cookie\030\001 \002(\t\022\037\n\004cond\030\002 \002(\0162\021.process.C"
    "ondType\"A\n\rClusterConfig\022\017\n\007cluster\030\001 \002("
    "\t\022\037\n\004cond\030\002 \002(\0162\021.process.CondType\"\374\001\n\rC"
    "heckListCond\022$\n\006srcids\030\001 \003(\0132\024.process.S"
    "rcidConfig\022(\n\007sewords\030\002 \003(\0132\027.process.Sc"
    "anCondSeWord\022\"\n\003lbs\030\003 \003(\0132\025.process.Loca"
    "tionInfo\022%\n\006cookie\030\004 \003(\0132\025.process.Cooki"
    "eConfig\022\'\n\007cluster\030\005 \003(\0132\026.process.Clust"
    "erConfig\022\'\n\tres_srcid\030\006 \003(\0132\024.process.Sr"
    "cidConfig\"V\n\031SetCheckListConfigRequest\022\023"
    "\n\013application\030\001 \002(\t\022$\n\004cond\030\002 \002(\0132\026.proc"
    "ess.CheckListCond\"\222\001\n\032SetCheckListConfig"
    "Response\022>\n\006status\030\001 \002(\0162..process.SetCh"
    "eckListConfigResponse.Res_Status\022\r\n\005erro"
    "r\030\002 \001(\t\"%\n\nRes_Status\022\013\n\007SUCCEED\020\000\022\n\n\006FA"
    "ILED\020\001\"0\n\031GetCheckListConfigRequest\022\023\n\013a"
    "pplication\030\001 \002(\t\"\270\001\n\032GetCheckListConfigR"
    "esponse\022>\n\006status\030\001 \002(\0162..process.GetChe"
    "ckListConfigResponse.Res_Status\022\r\n\005error"
    "\030\002 \001(\t\022$\n\004cond\030\003 \003(\0132\026.process.CheckList"
    "Cond\"%\n\nRes_Status\022\013\n\007SUCCEED\020\000\022\n\n\006FAILE"
    "D\020\001\"\236\001\n\030GetLogProcessStatRequest\022\023\n\013appl"
    "ication\030\001 \002(\t\022\020\n\010startime\030\002 \002(\003\022\017\n\007endti"
    "me\030\003 \002(\003\022\022\n\nstartindex\030\004 \001(\005\022\020\n\010endindex"
    "\030\005 \001(\005\022$\n\004cond\030\006 \001(\0132\026.process.CheckList"
    "Cond\"\262\001\n\031GetLogProcessStatResponse\022=\n\006st"
    "atus\030\001 \002(\0162-.process.GetLogProcessStatRe"
    "sponse.Res_Status\022\r\n\005error\030\002 \001(\t\022\r\n\005coun"
    "t\030\003 \002(\003\022\021\n\titeminfos\030\004 \003(\t\"%\n\nRes_Status"
    "\022\013\n\007SUCCEED\020\000\022\n\n\006FAILED\020\001*\312\001\n\010CondType\022\n"
    "\n\006condIn\020\001\022\r\n\tcondNotIn\020\002\022\n\n\006condIs\020\003\022\r\n"
    "\tcondExist\020\004\022\020\n\014condNotExist\020\005\022\r\n\tcondEq"
    "ual\020\006\022\021\n\rcondPartEqual\020\007\022\020\n\014condNotEqual"
    "\020\010\022\016\n\ncondLarger\020\t\022\017\n\013condSmaller\020\n\022\017\n\013c"
    "ondIsFront\020\013\022\020\n\014condIsBehind\020\0142\353\002\n\016Proce"
    "ssService\022\?\n\010Transmit\022\030.process.Transmit"
    "Request\032\031.process.TransmitResponse\022]\n\022Se"
    "tCheckListConfig\022\".process.SetCheckListC"
    "onfigRequest\032#.process.SetCheckListConfi"
    "gResponse\022]\n\022GetCheckListConfig\022\".proces"
    "s.GetCheckListConfigRequest\032#.process.Ge"
    "tCheckListConfigResponse\022Z\n\021GetLogProces"
    "sStat\022!.process.GetLogProcessStatRequest"
    "\032\".process.GetLogProcessStatResponseB\003\200\001"
    "\001", 2241);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transmit.proto", &protobuf_RegisterTypes);
  MapEntry::default_instance_ = new MapEntry();
  TransmitRequest::default_instance_ = new TransmitRequest();
  TransmitResponse::default_instance_ = new TransmitResponse();
  SrcidConfig::default_instance_ = new SrcidConfig();
  ScanCondSeWord::default_instance_ = new ScanCondSeWord();
  LocationInfo::default_instance_ = new LocationInfo();
  CookieConfig::default_instance_ = new CookieConfig();
  ClusterConfig::default_instance_ = new ClusterConfig();
  CheckListCond::default_instance_ = new CheckListCond();
  SetCheckListConfigRequest::default_instance_ = new SetCheckListConfigRequest();
  SetCheckListConfigResponse::default_instance_ = new SetCheckListConfigResponse();
  GetCheckListConfigRequest::default_instance_ = new GetCheckListConfigRequest();
  GetCheckListConfigResponse::default_instance_ = new GetCheckListConfigResponse();
  GetLogProcessStatRequest::default_instance_ = new GetLogProcessStatRequest();
  GetLogProcessStatResponse::default_instance_ = new GetLogProcessStatResponse();
  MapEntry::default_instance_->InitAsDefaultInstance();
  TransmitRequest::default_instance_->InitAsDefaultInstance();
  TransmitResponse::default_instance_->InitAsDefaultInstance();
  SrcidConfig::default_instance_->InitAsDefaultInstance();
  ScanCondSeWord::default_instance_->InitAsDefaultInstance();
  LocationInfo::default_instance_->InitAsDefaultInstance();
  CookieConfig::default_instance_->InitAsDefaultInstance();
  ClusterConfig::default_instance_->InitAsDefaultInstance();
  CheckListCond::default_instance_->InitAsDefaultInstance();
  SetCheckListConfigRequest::default_instance_->InitAsDefaultInstance();
  SetCheckListConfigResponse::default_instance_->InitAsDefaultInstance();
  GetCheckListConfigRequest::default_instance_->InitAsDefaultInstance();
  GetCheckListConfigResponse::default_instance_->InitAsDefaultInstance();
  GetLogProcessStatRequest::default_instance_->InitAsDefaultInstance();
  GetLogProcessStatResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_transmit_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_transmit_2eproto {
  StaticDescriptorInitializer_transmit_2eproto() {
    protobuf_AddDesc_transmit_2eproto();
  }
} static_descriptor_initializer_transmit_2eproto_;
const ::google::protobuf::EnumDescriptor* CondType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CondType_descriptor_;
}
bool CondType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MapEntry::kKeyFieldNumber;
const int MapEntry::kValueFieldNumber;
#endif  // !_MSC_VER

MapEntry::MapEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:process.MapEntry)
}

void MapEntry::InitAsDefaultInstance() {
}

MapEntry::MapEntry(const MapEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:process.MapEntry)
}

void MapEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapEntry::~MapEntry() {
  // @@protoc_insertion_point(destructor:process.MapEntry)
  SharedDtor();
}

void MapEntry::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void MapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapEntry_descriptor_;
}

const MapEntry& MapEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transmit_2eproto();
  return *default_instance_;
}

MapEntry* MapEntry::default_instance_ = NULL;

MapEntry* MapEntry::New() const {
  return new MapEntry;
}

void MapEntry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:process.MapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:process.MapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:process.MapEntry)
  return false;
#undef DO_
}

void MapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:process.MapEntry)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:process.MapEntry)
}

::google::protobuf::uint8* MapEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:process.MapEntry)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process.MapEntry)
  return target;
}

int MapEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapEntry::MergeFrom(const MapEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapEntry::CopyFrom(const MapEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MapEntry::Swap(MapEntry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapEntry_descriptor_;
  metadata.reflection = MapEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransmitRequest::kValuesFieldNumber;
#endif  // !_MSC_VER

TransmitRequest::TransmitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:process.TransmitRequest)
}

void TransmitRequest::InitAsDefaultInstance() {
}

TransmitRequest::TransmitRequest(const TransmitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:process.TransmitRequest)
}

void TransmitRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransmitRequest::~TransmitRequest() {
  // @@protoc_insertion_point(destructor:process.TransmitRequest)
  SharedDtor();
}

void TransmitRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransmitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransmitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransmitRequest_descriptor_;
}

const TransmitRequest& TransmitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transmit_2eproto();
  return *default_instance_;
}

TransmitRequest* TransmitRequest::default_instance_ = NULL;

TransmitRequest* TransmitRequest::New() const {
  return new TransmitRequest;
}

void TransmitRequest::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransmitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:process.TransmitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .process.MapEntry values = 1;
      case 1: {
        if (tag == 10) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:process.TransmitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:process.TransmitRequest)
  return false;
#undef DO_
}

void TransmitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:process.TransmitRequest)
  // repeated .process.MapEntry values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:process.TransmitRequest)
}

::google::protobuf::uint8* TransmitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:process.TransmitRequest)
  // repeated .process.MapEntry values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process.TransmitRequest)
  return target;
}

int TransmitRequest::ByteSize() const {
  int total_size = 0;

  // repeated .process.MapEntry values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransmitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransmitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransmitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransmitRequest::MergeFrom(const TransmitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransmitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmitRequest::CopyFrom(const TransmitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->values())) return false;
  return true;
}

void TransmitRequest::Swap(TransmitRequest* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransmitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransmitRequest_descriptor_;
  metadata.reflection = TransmitRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TransmitResponse_Res_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransmitResponse_Res_Status_descriptor_;
}
bool TransmitResponse_Res_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransmitResponse_Res_Status TransmitResponse::SUCCEED;
const TransmitResponse_Res_Status TransmitResponse::FAILED;
const TransmitResponse_Res_Status TransmitResponse::Res_Status_MIN;
const TransmitResponse_Res_Status TransmitResponse::Res_Status_MAX;
const int TransmitResponse::Res_Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TransmitResponse::kStatusFieldNumber;
const int TransmitResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

TransmitResponse::TransmitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:process.TransmitResponse)
}

void TransmitResponse::InitAsDefaultInstance() {
}

TransmitResponse::TransmitResponse(const TransmitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:process.TransmitResponse)
}

void TransmitResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransmitResponse::~TransmitResponse() {
  // @@protoc_insertion_point(destructor:process.TransmitResponse)
  SharedDtor();
}

void TransmitResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void TransmitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransmitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransmitResponse_descriptor_;
}

const TransmitResponse& TransmitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transmit_2eproto();
  return *default_instance_;
}

TransmitResponse* TransmitResponse::default_instance_ = NULL;

TransmitResponse* TransmitResponse::New() const {
  return new TransmitResponse;
}

void TransmitResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    status_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransmitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:process.TransmitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .process.TransmitResponse.Res_Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::process::TransmitResponse_Res_Status_IsValid(value)) {
            set_status(static_cast< ::process::TransmitResponse_Res_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:process.TransmitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:process.TransmitResponse)
  return false;
#undef DO_
}

void TransmitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:process.TransmitResponse)
  // required .process.TransmitResponse.Res_Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:process.TransmitResponse)
}

::google::protobuf::uint8* TransmitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:process.TransmitResponse)
  // required .process.TransmitResponse.Res_Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process.TransmitResponse)
  return target;
}

int TransmitResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .process.TransmitResponse.Res_Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransmitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransmitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransmitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransmitResponse::MergeFrom(const TransmitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransmitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmitResponse::CopyFrom(const TransmitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TransmitResponse::Swap(TransmitResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransmitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransmitResponse_descriptor_;
  metadata.reflection = TransmitResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrcidConfig::kSrcidFieldNumber;
const int SrcidConfig::kCondFieldNumber;
#endif  // !_MSC_VER

SrcidConfig::SrcidConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:process.SrcidConfig)
}

void SrcidConfig::InitAsDefaultInstance() {
}

SrcidConfig::SrcidConfig(const SrcidConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:process.SrcidConfig)
}

void SrcidConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  srcid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cond_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrcidConfig::~SrcidConfig() {
  // @@protoc_insertion_point(destructor:process.SrcidConfig)
  SharedDtor();
}

void SrcidConfig::SharedDtor() {
  if (srcid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srcid_;
  }
  if (this != default_instance_) {
  }
}

void SrcidConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrcidConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrcidConfig_descriptor_;
}

const SrcidConfig& SrcidConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transmit_2eproto();
  return *default_instance_;
}

SrcidConfig* SrcidConfig::default_instance_ = NULL;

SrcidConfig* SrcidConfig::New() const {
  return new SrcidConfig;
}

void SrcidConfig::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_srcid()) {
      if (srcid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        srcid_->clear();
      }
    }
    cond_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrcidConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:process.SrcidConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string srcid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srcid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->srcid().data(), this->srcid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "srcid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cond;
        break;
      }

      // required .process.CondType cond = 2;
      case 2: {
        if (tag == 16) {
         parse_cond:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::process::CondType_IsValid(value)) {
            set_cond(static_cast< ::process::CondType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:process.SrcidConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:process.SrcidConfig)
  return false;
#undef DO_
}

void SrcidConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:process.SrcidConfig)
  // required string srcid = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->srcid().data(), this->srcid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "srcid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->srcid(), output);
  }

  // required .process.CondType cond = 2;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:process.SrcidConfig)
}

::google::protobuf::uint8* SrcidConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:process.SrcidConfig)
  // required string srcid = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->srcid().data(), this->srcid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "srcid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->srcid(), target);
  }

  // required .process.CondType cond = 2;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process.SrcidConfig)
  return target;
}

int SrcidConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string srcid = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srcid());
    }

    // required .process.CondType cond = 2;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrcidConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrcidConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrcidConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrcidConfig::MergeFrom(const SrcidConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_cond()) {
      set_cond(from.cond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrcidConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrcidConfig::CopyFrom(const SrcidConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrcidConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SrcidConfig::Swap(SrcidConfig* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(cond_, other->cond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrcidConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrcidConfig_descriptor_;
  metadata.reflection = SrcidConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScanCondSeWord::kSearchwordFieldNumber;
const int ScanCondSeWord::kCondFieldNumber;
#endif  // !_MSC_VER

ScanCondSeWord::ScanCondSeWord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:process.ScanCondSeWord)
}

void ScanCondSeWord::InitAsDefaultInstance() {
}

ScanCondSeWord::ScanCondSeWord(const ScanCondSeWord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:process.ScanCondSeWord)
}

void ScanCondSeWord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  searchword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cond_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanCondSeWord::~ScanCondSeWord() {
  // @@protoc_insertion_point(destructor:process.ScanCondSeWord)
  SharedDtor();
}

void ScanCondSeWord::SharedDtor() {
  if (searchword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete searchword_;
  }
  if (this != default_instance_) {
  }
}

void ScanCondSeWord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanCondSeWord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanCondSeWord_descriptor_;
}

const ScanCondSeWord& ScanCondSeWord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transmit_2eproto();
  return *default_instance_;
}

ScanCondSeWord* ScanCondSeWord::default_instance_ = NULL;

ScanCondSeWord* ScanCondSeWord::New() const {
  return new ScanCondSeWord;
}

void ScanCondSeWord::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_searchword()) {
      if (searchword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        searchword_->clear();
      }
    }
    cond_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanCondSeWord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:process.ScanCondSeWord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string searchword = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searchword().data(), this->searchword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "searchword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cond;
        break;
      }

      // required .process.CondType cond = 2;
      case 2: {
        if (tag == 16) {
         parse_cond:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::process::CondType_IsValid(value)) {
            set_cond(static_cast< ::process::CondType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:process.ScanCondSeWord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:process.ScanCondSeWord)
  return false;
#undef DO_
}

void ScanCondSeWord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:process.ScanCondSeWord)
  // required string searchword = 1;
  if (has_searchword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchword().data(), this->searchword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "searchword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->searchword(), output);
  }

  // required .process.CondType cond = 2;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:process.ScanCondSeWord)
}

::google::protobuf::uint8* ScanCondSeWord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:process.ScanCondSeWord)
  // required string searchword = 1;
  if (has_searchword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchword().data(), this->searchword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "searchword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->searchword(), target);
  }

  // required .process.CondType cond = 2;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process.ScanCondSeWord)
  return target;
}

int ScanCondSeWord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string searchword = 1;
    if (has_searchword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searchword());
    }

    // required .process.CondType cond = 2;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanCondSeWord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanCondSeWord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanCondSeWord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanCondSeWord::MergeFrom(const ScanCondSeWord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_searchword()) {
      set_searchword(from.searchword());
    }
    if (from.has_cond()) {
      set_cond(from.cond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanCondSeWord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanCondSeWord::CopyFrom(const ScanCondSeWord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanCondSeWord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ScanCondSeWord::Swap(ScanCondSeWord* other) {
  if (other != this) {
    std::swap(searchword_, other->searchword_);
    std::swap(cond_, other->cond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanCondSeWord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanCondSeWord_descriptor_;
  metadata.reflection = ScanCondSeWord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocationInfo::kProvinceFieldNumber;
const int LocationInfo::kCityFieldNumber;
const int LocationInfo::kCondFieldNumber;
#endif  // !_MSC_VER

LocationInfo::LocationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:process.LocationInfo)
}

void LocationInfo::InitAsDefaultInstance() {
}

LocationInfo::LocationInfo(const LocationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:process.LocationInfo)
}

void LocationInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cond_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationInfo::~LocationInfo() {
  // @@protoc_insertion_point(destructor:process.LocationInfo)
  SharedDtor();
}

void LocationInfo::SharedDtor() {
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (this != default_instance_) {
  }
}

void LocationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationInfo_descriptor_;
}

const LocationInfo& LocationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transmit_2eproto();
  return *default_instance_;
}

LocationInfo* LocationInfo::default_instance_ = NULL;

LocationInfo* LocationInfo::New() const {
  return new LocationInfo;
}

void LocationInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    cond_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:process.LocationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string province = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }

      // optional string city = 2;
      case 2: {
        if (tag == 18) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cond;
        break;
      }

      // required .process.CondType cond = 3;
      case 3: {
        if (tag == 24) {
         parse_cond:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::process::CondType_IsValid(value)) {
            set_cond(static_cast< ::process::CondType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:process.LocationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:process.LocationInfo)
  return false;
#undef DO_
}

void LocationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:process.LocationInfo)
  // optional string province = 1;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->province(), output);
  }

  // optional string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->city(), output);
  }

  // required .process.CondType cond = 3;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:process.LocationInfo)
}

::google::protobuf::uint8* LocationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:process.LocationInfo)
  // optional string province = 1;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->province(), target);
  }

  // optional string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->city(), target);
  }

  // required .process.CondType cond = 3;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process.LocationInfo)
  return target;
}

int LocationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string province = 1;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // required .process.CondType cond = 3;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocationInfo::MergeFrom(const LocationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_cond()) {
      set_cond(from.cond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationInfo::CopyFrom(const LocationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void LocationInfo::Swap(LocationInfo* other) {
  if (other != this) {
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(cond_, other->cond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocationInfo_descriptor_;
  metadata.reflection = LocationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CookieConfig::kCookieFieldNumber;
const int CookieConfig::kCondFieldNumber;
#endif  // !_MSC_VER

CookieConfig::CookieConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:process.CookieConfig)
}

void CookieConfig::InitAsDefaultInstance() {
}

CookieConfig::CookieConfig(const CookieConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:process.CookieConfig)
}

void CookieConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cond_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CookieConfig::~CookieConfig() {
  // @@protoc_insertion_point(destructor:process.CookieConfig)
  SharedDtor();
}

void CookieConfig::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cookie_;
  }
  if (this != default_instance_) {
  }
}

void CookieConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CookieConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CookieConfig_descriptor_;
}

const CookieConfig& CookieConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transmit_2eproto();
  return *default_instance_;
}

CookieConfig* CookieConfig::default_instance_ = NULL;

CookieConfig* CookieConfig::New() const {
  return new CookieConfig;
}

void CookieConfig::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cookie_->clear();
      }
    }
    cond_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CookieConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:process.CookieConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookie = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cookie");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cond;
        break;
      }

      // required .process.CondType cond = 2;
      case 2: {
        if (tag == 16) {
         parse_cond:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::process::CondType_IsValid(value)) {
            set_cond(static_cast< ::process::CondType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:process.CookieConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:process.CookieConfig)
  return false;
#undef DO_
}

void CookieConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:process.CookieConfig)
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cookie");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cookie(), output);
  }

  // required .process.CondType cond = 2;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:process.CookieConfig)
}

::google::protobuf::uint8* CookieConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:process.CookieConfig)
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cookie");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookie(), target);
  }

  // required .process.CondType cond = 2;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process.CookieConfig)
  return target;
}

int CookieConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

    // required .process.CondType cond = 2;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CookieConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CookieConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CookieConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CookieConfig::MergeFrom(const CookieConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_cond()) {
      set_cond(from.cond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CookieConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CookieConfig::CopyFrom(const CookieConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CookieConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CookieConfig::Swap(CookieConfig* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(cond_, other->cond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CookieConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CookieConfig_descriptor_;
  metadata.reflection = CookieConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClusterConfig::kClusterFieldNumber;
const int ClusterConfig::kCondFieldNumber;
#endif  // !_MSC_VER

ClusterConfig::ClusterConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:process.ClusterConfig)
}

void ClusterConfig::InitAsDefaultInstance() {
}

ClusterConfig::ClusterConfig(const ClusterConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:process.ClusterConfig)
}

void ClusterConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cluster_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cond_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClusterConfig::~ClusterConfig() {
  // @@protoc_insertion_point(destructor:process.ClusterConfig)
  SharedDtor();
}

void ClusterConfig::SharedDtor() {
  if (cluster_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_;
  }
  if (this != default_instance_) {
  }
}

void ClusterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterConfig_descriptor_;
}

const ClusterConfig& ClusterConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transmit_2eproto();
  return *default_instance_;
}

ClusterConfig* ClusterConfig::default_instance_ = NULL;

ClusterConfig* ClusterConfig::New() const {
  return new ClusterConfig;
}

void ClusterConfig::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_cluster()) {
      if (cluster_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cluster_->clear();
      }
    }
    cond_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClusterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:process.ClusterConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cluster = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster().data(), this->cluster().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cluster");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cond;
        break;
      }

      // required .process.CondType cond = 2;
      case 2: {
        if (tag == 16) {
         parse_cond:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::process::CondType_IsValid(value)) {
            set_cond(static_cast< ::process::CondType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:process.ClusterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:process.ClusterConfig)
  return false;
#undef DO_
}

void ClusterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:process.ClusterConfig)
  // required string cluster = 1;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster().data(), this->cluster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster(), output);
  }

  // required .process.CondType cond = 2;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:process.ClusterConfig)
}

::google::protobuf::uint8* ClusterConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:process.ClusterConfig)
  // required string cluster = 1;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster().data(), this->cluster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster(), target);
  }

  // required .process.CondType cond = 2;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process.ClusterConfig)
  return target;
}

int ClusterConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cluster = 1;
    if (has_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster());
    }

    // required .process.CondType cond = 2;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClusterConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClusterConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClusterConfig::MergeFrom(const ClusterConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster()) {
      set_cluster(from.cluster());
    }
    if (from.has_cond()) {
      set_cond(from.cond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClusterConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterConfig::CopyFrom(const ClusterConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClusterConfig::Swap(ClusterConfig* other) {
  if (other != this) {
    std::swap(cluster_, other->cluster_);
    std::swap(cond_, other->cond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClusterConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterConfig_descriptor_;
  metadata.reflection = ClusterConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckListCond::kSrcidsFieldNumber;
const int CheckListCond::kSewordsFieldNumber;
const int CheckListCond::kLbsFieldNumber;
const int CheckListCond::kCookieFieldNumber;
const int CheckListCond::kClusterFieldNumber;
const int CheckListCond::kResSrcidFieldNumber;
#endif  // !_MSC_VER

CheckListCond::CheckListCond()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:process.CheckListCond)
}

void CheckListCond::InitAsDefaultInstance() {
}

CheckListCond::CheckListCond(const CheckListCond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:process.CheckListCond)
}

void CheckListCond::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckListCond::~CheckListCond() {
  // @@protoc_insertion_point(destructor:process.CheckListCond)
  SharedDtor();
}

void CheckListCond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckListCond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckListCond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckListCond_descriptor_;
}

const CheckListCond& CheckListCond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transmit_2eproto();
  return *default_instance_;
}

CheckListCond* CheckListCond::default_instance_ = NULL;

CheckListCond* CheckListCond::New() const {
  return new CheckListCond;
}

void CheckListCond::Clear() {
  srcids_.Clear();
  sewords_.Clear();
  lbs_.Clear();
  cookie_.Clear();
  cluster_.Clear();
  res_srcid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckListCond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:process.CheckListCond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .process.SrcidConfig srcids = 1;
      case 1: {
        if (tag == 10) {
         parse_srcids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_srcids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_srcids;
        if (input->ExpectTag(18)) goto parse_sewords;
        break;
      }

      // repeated .process.ScanCondSeWord sewords = 2;
      case 2: {
        if (tag == 18) {
         parse_sewords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sewords()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sewords;
        if (input->ExpectTag(26)) goto parse_lbs;
        break;
      }

      // repeated .process.LocationInfo lbs = 3;
      case 3: {
        if (tag == 26) {
         parse_lbs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lbs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lbs;
        if (input->ExpectTag(34)) goto parse_cookie;
        break;
      }

      // repeated .process.CookieConfig cookie = 4;
      case 4: {
        if (tag == 34) {
         parse_cookie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cookie()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cookie;
        if (input->ExpectTag(42)) goto parse_cluster;
        break;
      }

      // repeated .process.ClusterConfig cluster = 5;
      case 5: {
        if (tag == 42) {
         parse_cluster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cluster()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cluster;
        if (input->ExpectTag(50)) goto parse_res_srcid;
        break;
      }

      // repeated .process.SrcidConfig res_srcid = 6;
      case 6: {
        if (tag == 50) {
         parse_res_srcid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_res_srcid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_res_srcid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:process.CheckListCond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:process.CheckListCond)
  return false;
#undef DO_
}

void CheckListCond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:process.CheckListCond)
  // repeated .process.SrcidConfig srcids = 1;
  for (int i = 0; i < this->srcids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->srcids(i), output);
  }

  // repeated .process.ScanCondSeWord sewords = 2;
  for (int i = 0; i < this->sewords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sewords(i), output);
  }

  // repeated .process.LocationInfo lbs = 3;
  for (int i = 0; i < this->lbs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lbs(i), output);
  }

  // repeated .process.CookieConfig cookie = 4;
  for (int i = 0; i < this->cookie_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cookie(i), output);
  }

  // repeated .process.ClusterConfig cluster = 5;
  for (int i = 0; i < this->cluster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cluster(i), output);
  }

  // repeated .process.SrcidConfig res_srcid = 6;
  for (int i = 0; i < this->res_srcid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->res_srcid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:process.CheckListCond)
}

::google::protobuf::uint8* CheckListCond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:process.CheckListCond)
  // repeated .process.SrcidConfig srcids = 1;
  for (int i = 0; i < this->srcids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->srcids(i), target);
  }

  // repeated .process.ScanCondSeWord sewords = 2;
  for (int i = 0; i < this->sewords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sewords(i), target);
  }

  // repeated .process.LocationInfo lbs = 3;
  for (int i = 0; i < this->lbs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lbs(i), target);
  }

  // repeated .process.CookieConfig cookie = 4;
  for (int i = 0; i < this->cookie_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cookie(i), target);
  }

  // repeated .process.ClusterConfig cluster = 5;
  for (int i = 0; i < this->cluster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cluster(i), target);
  }

  // repeated .process.SrcidConfig res_srcid = 6;
  for (int i = 0; i < this->res_srcid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->res_srcid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process.CheckListCond)
  return target;
}

int CheckListCond::ByteSize() const {
  int total_size = 0;

  // repeated .process.SrcidConfig srcids = 1;
  total_size += 1 * this->srcids_size();
  for (int i = 0; i < this->srcids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->srcids(i));
  }

  // repeated .process.ScanCondSeWord sewords = 2;
  total_size += 1 * this->sewords_size();
  for (int i = 0; i < this->sewords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sewords(i));
  }

  // repeated .process.LocationInfo lbs = 3;
  total_size += 1 * this->lbs_size();
  for (int i = 0; i < this->lbs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lbs(i));
  }

  // repeated .process.CookieConfig cookie = 4;
  total_size += 1 * this->cookie_size();
  for (int i = 0; i < this->cookie_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cookie(i));
  }

  // repeated .process.ClusterConfig cluster = 5;
  total_size += 1 * this->cluster_size();
  for (int i = 0; i < this->cluster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cluster(i));
  }

  // repeated .process.SrcidConfig res_srcid = 6;
  total_size += 1 * this->res_srcid_size();
  for (int i = 0; i < this->res_srcid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->res_srcid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckListCond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckListCond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckListCond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckListCond::MergeFrom(const CheckListCond& from) {
  GOOGLE_CHECK_NE(&from, this);
  srcids_.MergeFrom(from.srcids_);
  sewords_.MergeFrom(from.sewords_);
  lbs_.MergeFrom(from.lbs_);
  cookie_.MergeFrom(from.cookie_);
  cluster_.MergeFrom(from.cluster_);
  res_srcid_.MergeFrom(from.res_srcid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckListCond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckListCond::CopyFrom(const CheckListCond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckListCond::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->srcids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sewords())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lbs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cookie())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cluster())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->res_srcid())) return false;
  return true;
}

void CheckListCond::Swap(CheckListCond* other) {
  if (other != this) {
    srcids_.Swap(&other->srcids_);
    sewords_.Swap(&other->sewords_);
    lbs_.Swap(&other->lbs_);
    cookie_.Swap(&other->cookie_);
    cluster_.Swap(&other->cluster_);
    res_srcid_.Swap(&other->res_srcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckListCond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckListCond_descriptor_;
  metadata.reflection = CheckListCond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetCheckListConfigRequest::kApplicationFieldNumber;
const int SetCheckListConfigRequest::kCondFieldNumber;
#endif  // !_MSC_VER

SetCheckListConfigRequest::SetCheckListConfigRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:process.SetCheckListConfigRequest)
}

void SetCheckListConfigRequest::InitAsDefaultInstance() {
  cond_ = const_cast< ::process::CheckListCond*>(&::process::CheckListCond::default_instance());
}

SetCheckListConfigRequest::SetCheckListConfigRequest(const SetCheckListConfigRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:process.SetCheckListConfigRequest)
}

void SetCheckListConfigRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  application_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cond_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetCheckListConfigRequest::~SetCheckListConfigRequest() {
  // @@protoc_insertion_point(destructor:process.SetCheckListConfigRequest)
  SharedDtor();
}

void SetCheckListConfigRequest::SharedDtor() {
  if (application_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete application_;
  }
  if (this != default_instance_) {
    delete cond_;
  }
}

void SetCheckListConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetCheckListConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCheckListConfigRequest_descriptor_;
}

const SetCheckListConfigRequest& SetCheckListConfigRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transmit_2eproto();
  return *default_instance_;
}

SetCheckListConfigRequest* SetCheckListConfigRequest::default_instance_ = NULL;

SetCheckListConfigRequest* SetCheckListConfigRequest::New() const {
  return new SetCheckListConfigRequest;
}

void SetCheckListConfigRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_application()) {
      if (application_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        application_->clear();
      }
    }
    if (has_cond()) {
      if (cond_ != NULL) cond_->::process::CheckListCond::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetCheckListConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:process.SetCheckListConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string application = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->application().data(), this->application().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "application");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cond;
        break;
      }

      // required .process.CheckListCond cond = 2;
      case 2: {
        if (tag == 18) {
         parse_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cond()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:process.SetCheckListConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:process.SetCheckListConfigRequest)
  return false;
#undef DO_
}

void SetCheckListConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:process.SetCheckListConfigRequest)
  // required string application = 1;
  if (has_application()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->application().data(), this->application().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "application");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->application(), output);
  }

  // required .process.CheckListCond cond = 2;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:process.SetCheckListConfigRequest)
}

::google::protobuf::uint8* SetCheckListConfigRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:process.SetCheckListConfigRequest)
  // required string application = 1;
  if (has_application()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->application().data(), this->application().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "application");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->application(), target);
  }

  // required .process.CheckListCond cond = 2;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process.SetCheckListConfigRequest)
  return target;
}

int SetCheckListConfigRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string application = 1;
    if (has_application()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application());
    }

    // required .process.CheckListCond cond = 2;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetCheckListConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetCheckListConfigRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetCheckListConfigRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetCheckListConfigRequest::MergeFrom(const SetCheckListConfigRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_application()) {
      set_application(from.application());
    }
    if (from.has_cond()) {
      mutable_cond()->::process::CheckListCond::MergeFrom(from.cond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetCheckListConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCheckListConfigRequest::CopyFrom(const SetCheckListConfigRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCheckListConfigRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cond()) {
    if (!this->cond().IsInitialized()) return false;
  }
  return true;
}

void SetCheckListConfigRequest::Swap(SetCheckListConfigRequest* other) {
  if (other != this) {
    std::swap(application_, other->application_);
    std::swap(cond_, other->cond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetCheckListConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetCheckListConfigRequest_descriptor_;
  metadata.reflection = SetCheckListConfigRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SetCheckListConfigResponse_Res_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCheckListConfigResponse_Res_Status_descriptor_;
}
bool SetCheckListConfigResponse_Res_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SetCheckListConfigResponse_Res_Status SetCheckListConfigResponse::SUCCEED;
const SetCheckListConfigResponse_Res_Status SetCheckListConfigResponse::FAILED;
const SetCheckListConfigResponse_Res_Status SetCheckListConfigResponse::Res_Status_MIN;
const SetCheckListConfigResponse_Res_Status SetCheckListConfigResponse::Res_Status_MAX;
const int SetCheckListConfigResponse::Res_Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SetCheckListConfigResponse::kStatusFieldNumber;
const int SetCheckListConfigResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

SetCheckListConfigResponse::SetCheckListConfigResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:process.SetCheckListConfigResponse)
}

void SetCheckListConfigResponse::InitAsDefaultInstance() {
}

SetCheckListConfigResponse::SetCheckListConfigResponse(const SetCheckListConfigResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:process.SetCheckListConfigResponse)
}

void SetCheckListConfigResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetCheckListConfigResponse::~SetCheckListConfigResponse() {
  // @@protoc_insertion_point(destructor:process.SetCheckListConfigResponse)
  SharedDtor();
}

void SetCheckListConfigResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void SetCheckListConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetCheckListConfigResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCheckListConfigResponse_descriptor_;
}

const SetCheckListConfigResponse& SetCheckListConfigResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transmit_2eproto();
  return *default_instance_;
}

SetCheckListConfigResponse* SetCheckListConfigResponse::default_instance_ = NULL;

SetCheckListConfigResponse* SetCheckListConfigResponse::New() const {
  return new SetCheckListConfigResponse;
}

void SetCheckListConfigResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    status_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetCheckListConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:process.SetCheckListConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .process.SetCheckListConfigResponse.Res_Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::process::SetCheckListConfigResponse_Res_Status_IsValid(value)) {
            set_status(static_cast< ::process::SetCheckListConfigResponse_Res_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:process.SetCheckListConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:process.SetCheckListConfigResponse)
  return false;
#undef DO_
}

void SetCheckListConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:process.SetCheckListConfigResponse)
  // required .process.SetCheckListConfigResponse.Res_Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:process.SetCheckListConfigResponse)
}

::google::protobuf::uint8* SetCheckListConfigResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:process.SetCheckListConfigResponse)
  // required .process.SetCheckListConfigResponse.Res_Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process.SetCheckListConfigResponse)
  return target;
}

int SetCheckListConfigResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .process.SetCheckListConfigResponse.Res_Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetCheckListConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetCheckListConfigResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetCheckListConfigResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetCheckListConfigResponse::MergeFrom(const SetCheckListConfigResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetCheckListConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCheckListConfigResponse::CopyFrom(const SetCheckListConfigResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCheckListConfigResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetCheckListConfigResponse::Swap(SetCheckListConfigResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetCheckListConfigResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetCheckListConfigResponse_descriptor_;
  metadata.reflection = SetCheckListConfigResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCheckListConfigRequest::kApplicationFieldNumber;
#endif  // !_MSC_VER

GetCheckListConfigRequest::GetCheckListConfigRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:process.GetCheckListConfigRequest)
}

void GetCheckListConfigRequest::InitAsDefaultInstance() {
}

GetCheckListConfigRequest::GetCheckListConfigRequest(const GetCheckListConfigRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:process.GetCheckListConfigRequest)
}

void GetCheckListConfigRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  application_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCheckListConfigRequest::~GetCheckListConfigRequest() {
  // @@protoc_insertion_point(destructor:process.GetCheckListConfigRequest)
  SharedDtor();
}

void GetCheckListConfigRequest::SharedDtor() {
  if (application_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete application_;
  }
  if (this != default_instance_) {
  }
}

void GetCheckListConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCheckListConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCheckListConfigRequest_descriptor_;
}

const GetCheckListConfigRequest& GetCheckListConfigRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transmit_2eproto();
  return *default_instance_;
}

GetCheckListConfigRequest* GetCheckListConfigRequest::default_instance_ = NULL;

GetCheckListConfigRequest* GetCheckListConfigRequest::New() const {
  return new GetCheckListConfigRequest;
}

void GetCheckListConfigRequest::Clear() {
  if (has_application()) {
    if (application_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      application_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCheckListConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:process.GetCheckListConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string application = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->application().data(), this->application().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "application");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:process.GetCheckListConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:process.GetCheckListConfigRequest)
  return false;
#undef DO_
}

void GetCheckListConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:process.GetCheckListConfigRequest)
  // required string application = 1;
  if (has_application()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->application().data(), this->application().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "application");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->application(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:process.GetCheckListConfigRequest)
}

::google::protobuf::uint8* GetCheckListConfigRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:process.GetCheckListConfigRequest)
  // required string application = 1;
  if (has_application()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->application().data(), this->application().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "application");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->application(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process.GetCheckListConfigRequest)
  return target;
}

int GetCheckListConfigRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string application = 1;
    if (has_application()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCheckListConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCheckListConfigRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCheckListConfigRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCheckListConfigRequest::MergeFrom(const GetCheckListConfigRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_application()) {
      set_application(from.application());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCheckListConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCheckListConfigRequest::CopyFrom(const GetCheckListConfigRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCheckListConfigRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetCheckListConfigRequest::Swap(GetCheckListConfigRequest* other) {
  if (other != this) {
    std::swap(application_, other->application_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCheckListConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCheckListConfigRequest_descriptor_;
  metadata.reflection = GetCheckListConfigRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GetCheckListConfigResponse_Res_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCheckListConfigResponse_Res_Status_descriptor_;
}
bool GetCheckListConfigResponse_Res_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetCheckListConfigResponse_Res_Status GetCheckListConfigResponse::SUCCEED;
const GetCheckListConfigResponse_Res_Status GetCheckListConfigResponse::FAILED;
const GetCheckListConfigResponse_Res_Status GetCheckListConfigResponse::Res_Status_MIN;
const GetCheckListConfigResponse_Res_Status GetCheckListConfigResponse::Res_Status_MAX;
const int GetCheckListConfigResponse::Res_Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetCheckListConfigResponse::kStatusFieldNumber;
const int GetCheckListConfigResponse::kErrorFieldNumber;
const int GetCheckListConfigResponse::kCondFieldNumber;
#endif  // !_MSC_VER

GetCheckListConfigResponse::GetCheckListConfigResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:process.GetCheckListConfigResponse)
}

void GetCheckListConfigResponse::InitAsDefaultInstance() {
}

GetCheckListConfigResponse::GetCheckListConfigResponse(const GetCheckListConfigResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:process.GetCheckListConfigResponse)
}

void GetCheckListConfigResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCheckListConfigResponse::~GetCheckListConfigResponse() {
  // @@protoc_insertion_point(destructor:process.GetCheckListConfigResponse)
  SharedDtor();
}

void GetCheckListConfigResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void GetCheckListConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCheckListConfigResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCheckListConfigResponse_descriptor_;
}

const GetCheckListConfigResponse& GetCheckListConfigResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transmit_2eproto();
  return *default_instance_;
}

GetCheckListConfigResponse* GetCheckListConfigResponse::default_instance_ = NULL;

GetCheckListConfigResponse* GetCheckListConfigResponse::New() const {
  return new GetCheckListConfigResponse;
}

void GetCheckListConfigResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    status_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
  }
  cond_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCheckListConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:process.GetCheckListConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .process.GetCheckListConfigResponse.Res_Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::process::GetCheckListConfigResponse_Res_Status_IsValid(value)) {
            set_status(static_cast< ::process::GetCheckListConfigResponse_Res_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cond;
        break;
      }

      // repeated .process.CheckListCond cond = 3;
      case 3: {
        if (tag == 26) {
         parse_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cond()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cond;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:process.GetCheckListConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:process.GetCheckListConfigResponse)
  return false;
#undef DO_
}

void GetCheckListConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:process.GetCheckListConfigResponse)
  // required .process.GetCheckListConfigResponse.Res_Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // repeated .process.CheckListCond cond = 3;
  for (int i = 0; i < this->cond_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cond(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:process.GetCheckListConfigResponse)
}

::google::protobuf::uint8* GetCheckListConfigResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:process.GetCheckListConfigResponse)
  // required .process.GetCheckListConfigResponse.Res_Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // repeated .process.CheckListCond cond = 3;
  for (int i = 0; i < this->cond_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cond(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process.GetCheckListConfigResponse)
  return target;
}

int GetCheckListConfigResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .process.GetCheckListConfigResponse.Res_Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  // repeated .process.CheckListCond cond = 3;
  total_size += 1 * this->cond_size();
  for (int i = 0; i < this->cond_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cond(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCheckListConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCheckListConfigResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCheckListConfigResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCheckListConfigResponse::MergeFrom(const GetCheckListConfigResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  cond_.MergeFrom(from.cond_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCheckListConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCheckListConfigResponse::CopyFrom(const GetCheckListConfigResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCheckListConfigResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cond())) return false;
  return true;
}

void GetCheckListConfigResponse::Swap(GetCheckListConfigResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_, other->error_);
    cond_.Swap(&other->cond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCheckListConfigResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCheckListConfigResponse_descriptor_;
  metadata.reflection = GetCheckListConfigResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLogProcessStatRequest::kApplicationFieldNumber;
const int GetLogProcessStatRequest::kStartimeFieldNumber;
const int GetLogProcessStatRequest::kEndtimeFieldNumber;
const int GetLogProcessStatRequest::kStartindexFieldNumber;
const int GetLogProcessStatRequest::kEndindexFieldNumber;
const int GetLogProcessStatRequest::kCondFieldNumber;
#endif  // !_MSC_VER

GetLogProcessStatRequest::GetLogProcessStatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:process.GetLogProcessStatRequest)
}

void GetLogProcessStatRequest::InitAsDefaultInstance() {
  cond_ = const_cast< ::process::CheckListCond*>(&::process::CheckListCond::default_instance());
}

GetLogProcessStatRequest::GetLogProcessStatRequest(const GetLogProcessStatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:process.GetLogProcessStatRequest)
}

void GetLogProcessStatRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  application_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  startindex_ = 0;
  endindex_ = 0;
  cond_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLogProcessStatRequest::~GetLogProcessStatRequest() {
  // @@protoc_insertion_point(destructor:process.GetLogProcessStatRequest)
  SharedDtor();
}

void GetLogProcessStatRequest::SharedDtor() {
  if (application_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete application_;
  }
  if (this != default_instance_) {
    delete cond_;
  }
}

void GetLogProcessStatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLogProcessStatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLogProcessStatRequest_descriptor_;
}

const GetLogProcessStatRequest& GetLogProcessStatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transmit_2eproto();
  return *default_instance_;
}

GetLogProcessStatRequest* GetLogProcessStatRequest::default_instance_ = NULL;

GetLogProcessStatRequest* GetLogProcessStatRequest::New() const {
  return new GetLogProcessStatRequest;
}

void GetLogProcessStatRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetLogProcessStatRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(startime_, endindex_);
    if (has_application()) {
      if (application_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        application_->clear();
      }
    }
    if (has_cond()) {
      if (cond_ != NULL) cond_->::process::CheckListCond::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLogProcessStatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:process.GetLogProcessStatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string application = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->application().data(), this->application().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "application");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_startime;
        break;
      }

      // required int64 startime = 2;
      case 2: {
        if (tag == 16) {
         parse_startime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &startime_)));
          set_has_startime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // required int64 endtime = 3;
      case 3: {
        if (tag == 24) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_startindex;
        break;
      }

      // optional int32 startindex = 4;
      case 4: {
        if (tag == 32) {
         parse_startindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startindex_)));
          set_has_startindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_endindex;
        break;
      }

      // optional int32 endindex = 5;
      case 5: {
        if (tag == 40) {
         parse_endindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endindex_)));
          set_has_endindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cond;
        break;
      }

      // optional .process.CheckListCond cond = 6;
      case 6: {
        if (tag == 50) {
         parse_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cond()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:process.GetLogProcessStatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:process.GetLogProcessStatRequest)
  return false;
#undef DO_
}

void GetLogProcessStatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:process.GetLogProcessStatRequest)
  // required string application = 1;
  if (has_application()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->application().data(), this->application().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "application");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->application(), output);
  }

  // required int64 startime = 2;
  if (has_startime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->startime(), output);
  }

  // required int64 endtime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // optional int32 startindex = 4;
  if (has_startindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->startindex(), output);
  }

  // optional int32 endindex = 5;
  if (has_endindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->endindex(), output);
  }

  // optional .process.CheckListCond cond = 6;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:process.GetLogProcessStatRequest)
}

::google::protobuf::uint8* GetLogProcessStatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:process.GetLogProcessStatRequest)
  // required string application = 1;
  if (has_application()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->application().data(), this->application().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "application");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->application(), target);
  }

  // required int64 startime = 2;
  if (has_startime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->startime(), target);
  }

  // required int64 endtime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // optional int32 startindex = 4;
  if (has_startindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->startindex(), target);
  }

  // optional int32 endindex = 5;
  if (has_endindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->endindex(), target);
  }

  // optional .process.CheckListCond cond = 6;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process.GetLogProcessStatRequest)
  return target;
}

int GetLogProcessStatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string application = 1;
    if (has_application()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application());
    }

    // required int64 startime = 2;
    if (has_startime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->startime());
    }

    // required int64 endtime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 startindex = 4;
    if (has_startindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startindex());
    }

    // optional int32 endindex = 5;
    if (has_endindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endindex());
    }

    // optional .process.CheckListCond cond = 6;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLogProcessStatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLogProcessStatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLogProcessStatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLogProcessStatRequest::MergeFrom(const GetLogProcessStatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_application()) {
      set_application(from.application());
    }
    if (from.has_startime()) {
      set_startime(from.startime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_startindex()) {
      set_startindex(from.startindex());
    }
    if (from.has_endindex()) {
      set_endindex(from.endindex());
    }
    if (from.has_cond()) {
      mutable_cond()->::process::CheckListCond::MergeFrom(from.cond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLogProcessStatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLogProcessStatRequest::CopyFrom(const GetLogProcessStatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLogProcessStatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_cond()) {
    if (!this->cond().IsInitialized()) return false;
  }
  return true;
}

void GetLogProcessStatRequest::Swap(GetLogProcessStatRequest* other) {
  if (other != this) {
    std::swap(application_, other->application_);
    std::swap(startime_, other->startime_);
    std::swap(endtime_, other->endtime_);
    std::swap(startindex_, other->startindex_);
    std::swap(endindex_, other->endindex_);
    std::swap(cond_, other->cond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLogProcessStatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLogProcessStatRequest_descriptor_;
  metadata.reflection = GetLogProcessStatRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GetLogProcessStatResponse_Res_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLogProcessStatResponse_Res_Status_descriptor_;
}
bool GetLogProcessStatResponse_Res_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetLogProcessStatResponse_Res_Status GetLogProcessStatResponse::SUCCEED;
const GetLogProcessStatResponse_Res_Status GetLogProcessStatResponse::FAILED;
const GetLogProcessStatResponse_Res_Status GetLogProcessStatResponse::Res_Status_MIN;
const GetLogProcessStatResponse_Res_Status GetLogProcessStatResponse::Res_Status_MAX;
const int GetLogProcessStatResponse::Res_Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetLogProcessStatResponse::kStatusFieldNumber;
const int GetLogProcessStatResponse::kErrorFieldNumber;
const int GetLogProcessStatResponse::kCountFieldNumber;
const int GetLogProcessStatResponse::kIteminfosFieldNumber;
#endif  // !_MSC_VER

GetLogProcessStatResponse::GetLogProcessStatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:process.GetLogProcessStatResponse)
}

void GetLogProcessStatResponse::InitAsDefaultInstance() {
}

GetLogProcessStatResponse::GetLogProcessStatResponse(const GetLogProcessStatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:process.GetLogProcessStatResponse)
}

void GetLogProcessStatResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLogProcessStatResponse::~GetLogProcessStatResponse() {
  // @@protoc_insertion_point(destructor:process.GetLogProcessStatResponse)
  SharedDtor();
}

void GetLogProcessStatResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void GetLogProcessStatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLogProcessStatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLogProcessStatResponse_descriptor_;
}

const GetLogProcessStatResponse& GetLogProcessStatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transmit_2eproto();
  return *default_instance_;
}

GetLogProcessStatResponse* GetLogProcessStatResponse::default_instance_ = NULL;

GetLogProcessStatResponse* GetLogProcessStatResponse::New() const {
  return new GetLogProcessStatResponse;
}

void GetLogProcessStatResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    status_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
    count_ = GOOGLE_LONGLONG(0);
  }
  iteminfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLogProcessStatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:process.GetLogProcessStatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .process.GetLogProcessStatResponse.Res_Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::process::GetLogProcessStatResponse_Res_Status_IsValid(value)) {
            set_status(static_cast< ::process::GetLogProcessStatResponse_Res_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required int64 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_iteminfos;
        break;
      }

      // repeated string iteminfos = 4;
      case 4: {
        if (tag == 34) {
         parse_iteminfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_iteminfos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iteminfos(this->iteminfos_size() - 1).data(),
            this->iteminfos(this->iteminfos_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iteminfos");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_iteminfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:process.GetLogProcessStatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:process.GetLogProcessStatResponse)
  return false;
#undef DO_
}

void GetLogProcessStatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:process.GetLogProcessStatResponse)
  // required .process.GetLogProcessStatResponse.Res_Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // required int64 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->count(), output);
  }

  // repeated string iteminfos = 4;
  for (int i = 0; i < this->iteminfos_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->iteminfos(i).data(), this->iteminfos(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "iteminfos");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->iteminfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:process.GetLogProcessStatResponse)
}

::google::protobuf::uint8* GetLogProcessStatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:process.GetLogProcessStatResponse)
  // required .process.GetLogProcessStatResponse.Res_Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // required int64 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->count(), target);
  }

  // repeated string iteminfos = 4;
  for (int i = 0; i < this->iteminfos_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iteminfos(i).data(), this->iteminfos(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iteminfos");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->iteminfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process.GetLogProcessStatResponse)
  return target;
}

int GetLogProcessStatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .process.GetLogProcessStatResponse.Res_Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // required int64 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

  }
  // repeated string iteminfos = 4;
  total_size += 1 * this->iteminfos_size();
  for (int i = 0; i < this->iteminfos_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->iteminfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLogProcessStatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLogProcessStatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLogProcessStatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLogProcessStatResponse::MergeFrom(const GetLogProcessStatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfos_.MergeFrom(from.iteminfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLogProcessStatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLogProcessStatResponse::CopyFrom(const GetLogProcessStatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLogProcessStatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void GetLogProcessStatResponse::Swap(GetLogProcessStatResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_, other->error_);
    std::swap(count_, other->count_);
    iteminfos_.Swap(&other->iteminfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLogProcessStatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLogProcessStatResponse_descriptor_;
  metadata.reflection = GetLogProcessStatResponse_reflection_;
  return metadata;
}


// ===================================================================

ProcessService::~ProcessService() {}

const ::google::protobuf::ServiceDescriptor* ProcessService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ProcessService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessService_descriptor_;
}

void ProcessService::Transmit(::google::protobuf::RpcController* controller,
                         const ::process::TransmitRequest*,
                         ::process::TransmitResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Transmit() not implemented.");
  done->Run();
}

void ProcessService::SetCheckListConfig(::google::protobuf::RpcController* controller,
                         const ::process::SetCheckListConfigRequest*,
                         ::process::SetCheckListConfigResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetCheckListConfig() not implemented.");
  done->Run();
}

void ProcessService::GetCheckListConfig(::google::protobuf::RpcController* controller,
                         const ::process::GetCheckListConfigRequest*,
                         ::process::GetCheckListConfigResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetCheckListConfig() not implemented.");
  done->Run();
}

void ProcessService::GetLogProcessStat(::google::protobuf::RpcController* controller,
                         const ::process::GetLogProcessStatRequest*,
                         ::process::GetLogProcessStatResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLogProcessStat() not implemented.");
  done->Run();
}

void ProcessService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ProcessService_descriptor_);
  switch(method->index()) {
    case 0:
      Transmit(controller,
             ::google::protobuf::down_cast<const ::process::TransmitRequest*>(request),
             ::google::protobuf::down_cast< ::process::TransmitResponse*>(response),
             done);
      break;
    case 1:
      SetCheckListConfig(controller,
             ::google::protobuf::down_cast<const ::process::SetCheckListConfigRequest*>(request),
             ::google::protobuf::down_cast< ::process::SetCheckListConfigResponse*>(response),
             done);
      break;
    case 2:
      GetCheckListConfig(controller,
             ::google::protobuf::down_cast<const ::process::GetCheckListConfigRequest*>(request),
             ::google::protobuf::down_cast< ::process::GetCheckListConfigResponse*>(response),
             done);
      break;
    case 3:
      GetLogProcessStat(controller,
             ::google::protobuf::down_cast<const ::process::GetLogProcessStatRequest*>(request),
             ::google::protobuf::down_cast< ::process::GetLogProcessStatResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ProcessService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::process::TransmitRequest::default_instance();
    case 1:
      return ::process::SetCheckListConfigRequest::default_instance();
    case 2:
      return ::process::GetCheckListConfigRequest::default_instance();
    case 3:
      return ::process::GetLogProcessStatRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ProcessService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::process::TransmitResponse::default_instance();
    case 1:
      return ::process::SetCheckListConfigResponse::default_instance();
    case 2:
      return ::process::GetCheckListConfigResponse::default_instance();
    case 3:
      return ::process::GetLogProcessStatResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ProcessService_Stub::ProcessService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ProcessService_Stub::ProcessService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ProcessService_Stub::~ProcessService_Stub() {
  if (owns_channel_) delete channel_;
}

void ProcessService_Stub::Transmit(::google::protobuf::RpcController* controller,
                              const ::process::TransmitRequest* request,
                              ::process::TransmitResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ProcessService_Stub::SetCheckListConfig(::google::protobuf::RpcController* controller,
                              const ::process::SetCheckListConfigRequest* request,
                              ::process::SetCheckListConfigResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ProcessService_Stub::GetCheckListConfig(::google::protobuf::RpcController* controller,
                              const ::process::GetCheckListConfigRequest* request,
                              ::process::GetCheckListConfigResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ProcessService_Stub::GetLogProcessStat(::google::protobuf::RpcController* controller,
                              const ::process::GetLogProcessStatRequest* request,
                              ::process::GetLogProcessStatResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace process

// @@protoc_insertion_point(global_scope)
