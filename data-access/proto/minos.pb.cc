// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "minos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace baidu {
namespace minos {

namespace {

const ::google::protobuf::Descriptor* PbRecordHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRecordHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAccountMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAccountMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrokerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BrokerResponse_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SubscribeRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeRecordRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeRecordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SubscribeRecordResponse_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InitSubscriberBrokerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitSubscriberBrokerRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InitSubscriberBrokerRequest_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* InitSubscriberBrokerRequest_StartRecordType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InitSubscriberBrokerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitSubscriberBrokerResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InitSubscriberBrokerResponse_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UninitSubscriberBrokerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UninitSubscriberBrokerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartitionProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartitionProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartitionGroupProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartitionGroupProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPartitionGroupProgressRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPartitionGroupProgressRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPartitionGroupProgressRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPartitionGroupProgressRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPartitionGroupProgressResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPartitionGroupProgressResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetPartitionGroupProgressResponse_Status_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* BrokerService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_minos_2eproto() {
  protobuf_AddDesc_minos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "minos.proto");
  GOOGLE_CHECK(file != NULL);
  PbRecordHeader_descriptor_ = file->message_type(0);
  static const int PbRecordHeader_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRecordHeader, body_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRecordHeader, record_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRecordHeader, timestamp_in_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRecordHeader, timestamp_in_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRecordHeader, timestamp_when_send_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRecordHeader, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRecordHeader, external_checkpoint_),
  };
  PbRecordHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRecordHeader_descriptor_,
      PbRecordHeader::default_instance_,
      PbRecordHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRecordHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRecordHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRecordHeader));
  PbRecord_descriptor_ = file->message_type(1);
  static const int PbRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRecord, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRecord, body_),
  };
  PbRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRecord_descriptor_,
      PbRecord::default_instance_,
      PbRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRecord));
  UserAccountMessage_descriptor_ = file->message_type(2);
  static const int UserAccountMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccountMessage, token_),
  };
  UserAccountMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAccountMessage_descriptor_,
      UserAccountMessage::default_instance_,
      UserAccountMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccountMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccountMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAccountMessage));
  BrokerResponse_descriptor_ = file->message_type(3);
  static const int BrokerResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerResponse, error_message_),
  };
  BrokerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrokerResponse_descriptor_,
      BrokerResponse::default_instance_,
      BrokerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrokerResponse));
  BrokerResponse_Status_descriptor_ = BrokerResponse_descriptor_->enum_type(0);
  SubscribeRecordRequest_descriptor_ = file->message_type(4);
  static const int SubscribeRecordRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRecordRequest, topic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRecordRequest, partition_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRecordRequest, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRecordRequest, data_package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRecordRequest, record_count_),
  };
  SubscribeRecordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeRecordRequest_descriptor_,
      SubscribeRecordRequest::default_instance_,
      SubscribeRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRecordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRecordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeRecordRequest));
  SubscribeRecordResponse_descriptor_ = file->message_type(5);
  static const int SubscribeRecordResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRecordResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRecordResponse, error_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRecordResponse, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRecordResponse, cur_data_package_id_),
  };
  SubscribeRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeRecordResponse_descriptor_,
      SubscribeRecordResponse::default_instance_,
      SubscribeRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeRecordResponse));
  SubscribeRecordResponse_Status_descriptor_ = SubscribeRecordResponse_descriptor_->enum_type(0);
  InitSubscriberBrokerRequest_descriptor_ = file->message_type(6);
  static const int InitSubscriberBrokerRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSubscriberBrokerRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSubscriberBrokerRequest, topic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSubscriberBrokerRequest, partition_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSubscriberBrokerRequest, need_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSubscriberBrokerRequest, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSubscriberBrokerRequest, start_record_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSubscriberBrokerRequest, start_timestamp_),
  };
  InitSubscriberBrokerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitSubscriberBrokerRequest_descriptor_,
      InitSubscriberBrokerRequest::default_instance_,
      InitSubscriberBrokerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSubscriberBrokerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSubscriberBrokerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitSubscriberBrokerRequest));
  InitSubscriberBrokerRequest_Type_descriptor_ = InitSubscriberBrokerRequest_descriptor_->enum_type(0);
  InitSubscriberBrokerRequest_StartRecordType_descriptor_ = InitSubscriberBrokerRequest_descriptor_->enum_type(1);
  InitSubscriberBrokerResponse_descriptor_ = file->message_type(7);
  static const int InitSubscriberBrokerResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSubscriberBrokerResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSubscriberBrokerResponse, error_message_),
  };
  InitSubscriberBrokerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitSubscriberBrokerResponse_descriptor_,
      InitSubscriberBrokerResponse::default_instance_,
      InitSubscriberBrokerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSubscriberBrokerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSubscriberBrokerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitSubscriberBrokerResponse));
  InitSubscriberBrokerResponse_Status_descriptor_ = InitSubscriberBrokerResponse_descriptor_->enum_type(0);
  UninitSubscriberBrokerRequest_descriptor_ = file->message_type(8);
  static const int UninitSubscriberBrokerRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UninitSubscriberBrokerRequest, topic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UninitSubscriberBrokerRequest, partition_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UninitSubscriberBrokerRequest, account_),
  };
  UninitSubscriberBrokerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UninitSubscriberBrokerRequest_descriptor_,
      UninitSubscriberBrokerRequest::default_instance_,
      UninitSubscriberBrokerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UninitSubscriberBrokerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UninitSubscriberBrokerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UninitSubscriberBrokerRequest));
  PartitionProgress_descriptor_ = file->message_type(9);
  static const int PartitionProgress_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionProgress, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionProgress, last_sended_max_record_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionProgress, cur_sended_max_record_id_),
  };
  PartitionProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartitionProgress_descriptor_,
      PartitionProgress::default_instance_,
      PartitionProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartitionProgress));
  PartitionGroupProgress_descriptor_ = file->message_type(10);
  static const int PartitionGroupProgress_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionGroupProgress, topic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionGroupProgress, partition_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionGroupProgress, cur_data_package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionGroupProgress, cur_partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionGroupProgress, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionGroupProgress, account_),
  };
  PartitionGroupProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartitionGroupProgress_descriptor_,
      PartitionGroupProgress::default_instance_,
      PartitionGroupProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionGroupProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionGroupProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartitionGroupProgress));
  SetPartitionGroupProgressRequest_descriptor_ = file->message_type(11);
  static const int SetPartitionGroupProgressRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPartitionGroupProgressRequest, pg_progress_),
  };
  SetPartitionGroupProgressRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPartitionGroupProgressRequest_descriptor_,
      SetPartitionGroupProgressRequest::default_instance_,
      SetPartitionGroupProgressRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPartitionGroupProgressRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPartitionGroupProgressRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPartitionGroupProgressRequest));
  GetPartitionGroupProgressRequest_descriptor_ = file->message_type(12);
  static const int GetPartitionGroupProgressRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartitionGroupProgressRequest, topic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartitionGroupProgressRequest, partition_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartitionGroupProgressRequest, account_),
  };
  GetPartitionGroupProgressRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPartitionGroupProgressRequest_descriptor_,
      GetPartitionGroupProgressRequest::default_instance_,
      GetPartitionGroupProgressRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartitionGroupProgressRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartitionGroupProgressRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPartitionGroupProgressRequest));
  GetPartitionGroupProgressResponse_descriptor_ = file->message_type(13);
  static const int GetPartitionGroupProgressResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartitionGroupProgressResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartitionGroupProgressResponse, error_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartitionGroupProgressResponse, pg_progress_),
  };
  GetPartitionGroupProgressResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPartitionGroupProgressResponse_descriptor_,
      GetPartitionGroupProgressResponse::default_instance_,
      GetPartitionGroupProgressResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartitionGroupProgressResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartitionGroupProgressResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPartitionGroupProgressResponse));
  GetPartitionGroupProgressResponse_Status_descriptor_ = GetPartitionGroupProgressResponse_descriptor_->enum_type(0);
  BrokerService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_minos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRecordHeader_descriptor_, &PbRecordHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRecord_descriptor_, &PbRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAccountMessage_descriptor_, &UserAccountMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrokerResponse_descriptor_, &BrokerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeRecordRequest_descriptor_, &SubscribeRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeRecordResponse_descriptor_, &SubscribeRecordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitSubscriberBrokerRequest_descriptor_, &InitSubscriberBrokerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitSubscriberBrokerResponse_descriptor_, &InitSubscriberBrokerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UninitSubscriberBrokerRequest_descriptor_, &UninitSubscriberBrokerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartitionProgress_descriptor_, &PartitionProgress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartitionGroupProgress_descriptor_, &PartitionGroupProgress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPartitionGroupProgressRequest_descriptor_, &SetPartitionGroupProgressRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPartitionGroupProgressRequest_descriptor_, &GetPartitionGroupProgressRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPartitionGroupProgressResponse_descriptor_, &GetPartitionGroupProgressResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_minos_2eproto() {
  delete PbRecordHeader::default_instance_;
  delete PbRecordHeader_reflection_;
  delete PbRecord::default_instance_;
  delete PbRecord_reflection_;
  delete UserAccountMessage::default_instance_;
  delete UserAccountMessage_reflection_;
  delete BrokerResponse::default_instance_;
  delete BrokerResponse_reflection_;
  delete SubscribeRecordRequest::default_instance_;
  delete SubscribeRecordRequest_reflection_;
  delete SubscribeRecordResponse::default_instance_;
  delete SubscribeRecordResponse_reflection_;
  delete InitSubscriberBrokerRequest::default_instance_;
  delete InitSubscriberBrokerRequest_reflection_;
  delete InitSubscriberBrokerResponse::default_instance_;
  delete InitSubscriberBrokerResponse_reflection_;
  delete UninitSubscriberBrokerRequest::default_instance_;
  delete UninitSubscriberBrokerRequest_reflection_;
  delete PartitionProgress::default_instance_;
  delete PartitionProgress_reflection_;
  delete PartitionGroupProgress::default_instance_;
  delete PartitionGroupProgress_reflection_;
  delete SetPartitionGroupProgressRequest::default_instance_;
  delete SetPartitionGroupProgressRequest_reflection_;
  delete GetPartitionGroupProgressRequest::default_instance_;
  delete GetPartitionGroupProgressRequest_reflection_;
  delete GetPartitionGroupProgressResponse::default_instance_;
  delete GetPartitionGroupProgressResponse_reflection_;
}

void protobuf_AddDesc_minos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013minos.proto\022\013baidu.minos\"\301\001\n\016PbRecordH"
    "eader\022\023\n\013body_length\030\005 \001(\003\022\021\n\trecord_id\030"
    "\006 \001(\003\022\030\n\020timestamp_in_log\030\n \001(\003\022\035\n\025times"
    "tamp_in_filename\030\013 \001(\003\022\033\n\023timestamp_when"
    "_send\030\014 \001(\003\022\024\n\014partition_id\030\023 \001(\005\022\033\n\023ext"
    "ernal_checkpoint\030\026 \001(\t\"E\n\010PbRecord\022+\n\006he"
    "ader\030\001 \001(\0132\033.baidu.minos.PbRecordHeader\022"
    "\014\n\004body\030\002 \001(\014\"#\n\022UserAccountMessage\022\r\n\005t"
    "oken\030\001 \001(\t\"~\n\016BrokerResponse\0222\n\006status\030\001"
    " \001(\0162\".baidu.minos.BrokerResponse.Status"
    "\022\025\n\rerror_message\030\002 \001(\t\"!\n\006Status\022\013\n\007SUC"
    "CEED\020\001\022\n\n\006FAILED\020\002\"\252\001\n\026SubscribeRecordRe"
    "quest\022\020\n\010topic_id\030\001 \001(\005\022\032\n\022partition_gro"
    "up_id\030\002 \001(\003\0220\n\007account\030\003 \001(\0132\037.baidu.min"
    "os.UserAccountMessage\022\027\n\017data_package_id"
    "\030\004 \001(\003\022\027\n\014record_count\030\005 \001(\005:\0011\"\232\002\n\027Subs"
    "cribeRecordResponse\022;\n\006status\030\001 \002(\0162+.ba"
    "idu.minos.SubscribeRecordResponse.Status"
    "\022\025\n\rerror_message\030\002 \001(\t\022#\n\004data\030\003 \003(\0132\025."
    "baidu.minos.PbRecord\022\033\n\023cur_data_package"
    "_id\030\004 \001(\003\"i\n\006Status\022\013\n\007SUCCEED\020\001\022\020\n\014NO_D"
    "ATA_LEFT\020\002\022\027\n\023RECORD_ID_TOO_SMALL\020\003\022\033\n\027N"
    "O_SUCH_PARTITION_GROUP\020\004\022\n\n\006FAILED\020c\"\276\003\n"
    "\033InitSubscriberBrokerRequest\022F\n\004type\030\001 \001"
    "(\0162-.baidu.minos.InitSubscriberBrokerReq"
    "uest.Type:\tTIMESTAMP\022\020\n\010topic_id\030\002 \001(\005\022\032"
    "\n\022partition_group_id\030\003 \001(\003\022\033\n\rneed_progr"
    "ess\030\004 \001(\010:\004true\0220\n\007account\030\005 \001(\0132\037.baidu"
    ".minos.UserAccountMessage\022b\n\021start_recor"
    "d_type\030\006 \001(\01628.baidu.minos.InitSubscribe"
    "rBrokerRequest.StartRecordType:\rNEWEST_R"
    "ECORD\022\027\n\017start_timestamp\030\007 \001(\003\"$\n\004Type\022\r"
    "\n\tTIMESTAMP\020\001\022\r\n\tRECORD_ID\020\002\"7\n\017StartRec"
    "ordType\022\021\n\rOLDEST_RECORD\020\001\022\021\n\rNEWEST_REC"
    "ORD\020\002\"\250\001\n\034InitSubscriberBrokerResponse\022@"
    "\n\006status\030\001 \002(\01620.baidu.minos.InitSubscri"
    "berBrokerResponse.Status\022\025\n\rerror_messag"
    "e\030\002 \001(\t\"/\n\006Status\022\013\n\007SUCCEED\020\000\022\n\n\006FAILED"
    "\020\001\022\014\n\010STARTING\020\002\"\177\n\035UninitSubscriberBrok"
    "erRequest\022\020\n\010topic_id\030\001 \001(\005\022\032\n\022partition"
    "_group_id\030\002 \001(\003\0220\n\007account\030\003 \001(\0132\037.baidu"
    ".minos.UserAccountMessage\"n\n\021PartitionPr"
    "ogress\022\024\n\014partition_id\030\001 \001(\003\022!\n\031last_sen"
    "ded_max_record_id\030\002 \001(\003\022 \n\030cur_sended_ma"
    "x_record_id\030\003 \001(\003\"\341\001\n\026PartitionGroupProg"
    "ress\022\020\n\010topic_id\030\001 \001(\005\022\032\n\022partition_grou"
    "p_id\030\002 \001(\005\022\033\n\023cur_data_package_id\030\003 \001(\003\022"
    "\030\n\020cur_partition_id\030\004 \001(\003\0220\n\010progress\030\005 "
    "\003(\0132\036.baidu.minos.PartitionProgress\0220\n\007a"
    "ccount\030\006 \001(\0132\037.baidu.minos.UserAccountMe"
    "ssage\"\\\n SetPartitionGroupProgressReques"
    "t\0228\n\013pg_progress\030\001 \001(\0132#.baidu.minos.Par"
    "titionGroupProgress\"\202\001\n GetPartitionGrou"
    "pProgressRequest\022\020\n\010topic_id\030\001 \001(\005\022\032\n\022pa"
    "rtition_group_id\030\002 \001(\003\0220\n\007account\030\003 \001(\0132"
    "\037.baidu.minos.UserAccountMessage\"\336\001\n!Get"
    "PartitionGroupProgressResponse\022E\n\006status"
    "\030\001 \002(\01625.baidu.minos.GetPartitionGroupPr"
    "ogressResponse.Status\022\025\n\rerror_message\030\002"
    " \001(\t\0228\n\013pg_progress\030\003 \001(\0132#.baidu.minos."
    "PartitionGroupProgress\"!\n\006Status\022\013\n\007SUCC"
    "EED\020\000\022\n\n\006FAILED\020\0012\237\004\n\rBrokerService\022f\n\017i"
    "nit_subscriber\022(.baidu.minos.InitSubscri"
    "berBrokerRequest\032).baidu.minos.InitSubsc"
    "riberBrokerResponse\022\\\n\021uninit_subscriber"
    "\022*.baidu.minos.UninitSubscriberBrokerReq"
    "uest\032\033.baidu.minos.BrokerResponse\022j\n\034set"
    "_partition_group_progress\022-.baidu.minos."
    "SetPartitionGroupProgressRequest\032\033.baidu"
    ".minos.BrokerResponse\022}\n\034get_partition_g"
    "roup_progress\022-.baidu.minos.GetPartition"
    "GroupProgressRequest\032..baidu.minos.GetPa"
    "rtitionGroupProgressResponse\022]\n\020subscrib"
    "e_record\022#.baidu.minos.SubscribeRecordRe"
    "quest\032$.baidu.minos.SubscribeRecordRespo"
    "nseB\003\200\001\001", 3008);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "minos.proto", &protobuf_RegisterTypes);
  PbRecordHeader::default_instance_ = new PbRecordHeader();
  PbRecord::default_instance_ = new PbRecord();
  UserAccountMessage::default_instance_ = new UserAccountMessage();
  BrokerResponse::default_instance_ = new BrokerResponse();
  SubscribeRecordRequest::default_instance_ = new SubscribeRecordRequest();
  SubscribeRecordResponse::default_instance_ = new SubscribeRecordResponse();
  InitSubscriberBrokerRequest::default_instance_ = new InitSubscriberBrokerRequest();
  InitSubscriberBrokerResponse::default_instance_ = new InitSubscriberBrokerResponse();
  UninitSubscriberBrokerRequest::default_instance_ = new UninitSubscriberBrokerRequest();
  PartitionProgress::default_instance_ = new PartitionProgress();
  PartitionGroupProgress::default_instance_ = new PartitionGroupProgress();
  SetPartitionGroupProgressRequest::default_instance_ = new SetPartitionGroupProgressRequest();
  GetPartitionGroupProgressRequest::default_instance_ = new GetPartitionGroupProgressRequest();
  GetPartitionGroupProgressResponse::default_instance_ = new GetPartitionGroupProgressResponse();
  PbRecordHeader::default_instance_->InitAsDefaultInstance();
  PbRecord::default_instance_->InitAsDefaultInstance();
  UserAccountMessage::default_instance_->InitAsDefaultInstance();
  BrokerResponse::default_instance_->InitAsDefaultInstance();
  SubscribeRecordRequest::default_instance_->InitAsDefaultInstance();
  SubscribeRecordResponse::default_instance_->InitAsDefaultInstance();
  InitSubscriberBrokerRequest::default_instance_->InitAsDefaultInstance();
  InitSubscriberBrokerResponse::default_instance_->InitAsDefaultInstance();
  UninitSubscriberBrokerRequest::default_instance_->InitAsDefaultInstance();
  PartitionProgress::default_instance_->InitAsDefaultInstance();
  PartitionGroupProgress::default_instance_->InitAsDefaultInstance();
  SetPartitionGroupProgressRequest::default_instance_->InitAsDefaultInstance();
  GetPartitionGroupProgressRequest::default_instance_->InitAsDefaultInstance();
  GetPartitionGroupProgressResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_minos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_minos_2eproto {
  StaticDescriptorInitializer_minos_2eproto() {
    protobuf_AddDesc_minos_2eproto();
  }
} static_descriptor_initializer_minos_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PbRecordHeader::kBodyLengthFieldNumber;
const int PbRecordHeader::kRecordIdFieldNumber;
const int PbRecordHeader::kTimestampInLogFieldNumber;
const int PbRecordHeader::kTimestampInFilenameFieldNumber;
const int PbRecordHeader::kTimestampWhenSendFieldNumber;
const int PbRecordHeader::kPartitionIdFieldNumber;
const int PbRecordHeader::kExternalCheckpointFieldNumber;
#endif  // !_MSC_VER

PbRecordHeader::PbRecordHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.minos.PbRecordHeader)
}

void PbRecordHeader::InitAsDefaultInstance() {
}

PbRecordHeader::PbRecordHeader(const PbRecordHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.minos.PbRecordHeader)
}

void PbRecordHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  body_length_ = GOOGLE_LONGLONG(0);
  record_id_ = GOOGLE_LONGLONG(0);
  timestamp_in_log_ = GOOGLE_LONGLONG(0);
  timestamp_in_filename_ = GOOGLE_LONGLONG(0);
  timestamp_when_send_ = GOOGLE_LONGLONG(0);
  partition_id_ = 0;
  external_checkpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRecordHeader::~PbRecordHeader() {
  // @@protoc_insertion_point(destructor:baidu.minos.PbRecordHeader)
  SharedDtor();
}

void PbRecordHeader::SharedDtor() {
  if (external_checkpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete external_checkpoint_;
  }
  if (this != default_instance_) {
  }
}

void PbRecordHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRecordHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRecordHeader_descriptor_;
}

const PbRecordHeader& PbRecordHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minos_2eproto();
  return *default_instance_;
}

PbRecordHeader* PbRecordHeader::default_instance_ = NULL;

PbRecordHeader* PbRecordHeader::New() const {
  return new PbRecordHeader;
}

void PbRecordHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRecordHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(body_length_, timestamp_when_send_);
    partition_id_ = 0;
    if (has_external_checkpoint()) {
      if (external_checkpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        external_checkpoint_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRecordHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.minos.PbRecordHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 body_length = 5;
      case 5: {
        if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &body_length_)));
          set_has_body_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_record_id;
        break;
      }

      // optional int64 record_id = 6;
      case 6: {
        if (tag == 48) {
         parse_record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_timestamp_in_log;
        break;
      }

      // optional int64 timestamp_in_log = 10;
      case 10: {
        if (tag == 80) {
         parse_timestamp_in_log:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_in_log_)));
          set_has_timestamp_in_log();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_timestamp_in_filename;
        break;
      }

      // optional int64 timestamp_in_filename = 11;
      case 11: {
        if (tag == 88) {
         parse_timestamp_in_filename:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_in_filename_)));
          set_has_timestamp_in_filename();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_timestamp_when_send;
        break;
      }

      // optional int64 timestamp_when_send = 12;
      case 12: {
        if (tag == 96) {
         parse_timestamp_when_send:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_when_send_)));
          set_has_timestamp_when_send();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_partition_id;
        break;
      }

      // optional int32 partition_id = 19;
      case 19: {
        if (tag == 152) {
         parse_partition_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
          set_has_partition_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_external_checkpoint;
        break;
      }

      // optional string external_checkpoint = 22;
      case 22: {
        if (tag == 178) {
         parse_external_checkpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_checkpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_checkpoint().data(), this->external_checkpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "external_checkpoint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.minos.PbRecordHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.minos.PbRecordHeader)
  return false;
#undef DO_
}

void PbRecordHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.minos.PbRecordHeader)
  // optional int64 body_length = 5;
  if (has_body_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->body_length(), output);
  }

  // optional int64 record_id = 6;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->record_id(), output);
  }

  // optional int64 timestamp_in_log = 10;
  if (has_timestamp_in_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->timestamp_in_log(), output);
  }

  // optional int64 timestamp_in_filename = 11;
  if (has_timestamp_in_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->timestamp_in_filename(), output);
  }

  // optional int64 timestamp_when_send = 12;
  if (has_timestamp_when_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->timestamp_when_send(), output);
  }

  // optional int32 partition_id = 19;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->partition_id(), output);
  }

  // optional string external_checkpoint = 22;
  if (has_external_checkpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_checkpoint().data(), this->external_checkpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "external_checkpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->external_checkpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.minos.PbRecordHeader)
}

::google::protobuf::uint8* PbRecordHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.minos.PbRecordHeader)
  // optional int64 body_length = 5;
  if (has_body_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->body_length(), target);
  }

  // optional int64 record_id = 6;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->record_id(), target);
  }

  // optional int64 timestamp_in_log = 10;
  if (has_timestamp_in_log()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->timestamp_in_log(), target);
  }

  // optional int64 timestamp_in_filename = 11;
  if (has_timestamp_in_filename()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->timestamp_in_filename(), target);
  }

  // optional int64 timestamp_when_send = 12;
  if (has_timestamp_when_send()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->timestamp_when_send(), target);
  }

  // optional int32 partition_id = 19;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->partition_id(), target);
  }

  // optional string external_checkpoint = 22;
  if (has_external_checkpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_checkpoint().data(), this->external_checkpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "external_checkpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->external_checkpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.minos.PbRecordHeader)
  return target;
}

int PbRecordHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 body_length = 5;
    if (has_body_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->body_length());
    }

    // optional int64 record_id = 6;
    if (has_record_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->record_id());
    }

    // optional int64 timestamp_in_log = 10;
    if (has_timestamp_in_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_in_log());
    }

    // optional int64 timestamp_in_filename = 11;
    if (has_timestamp_in_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_in_filename());
    }

    // optional int64 timestamp_when_send = 12;
    if (has_timestamp_when_send()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_when_send());
    }

    // optional int32 partition_id = 19;
    if (has_partition_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition_id());
    }

    // optional string external_checkpoint = 22;
    if (has_external_checkpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_checkpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRecordHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRecordHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRecordHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRecordHeader::MergeFrom(const PbRecordHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_body_length()) {
      set_body_length(from.body_length());
    }
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
    if (from.has_timestamp_in_log()) {
      set_timestamp_in_log(from.timestamp_in_log());
    }
    if (from.has_timestamp_in_filename()) {
      set_timestamp_in_filename(from.timestamp_in_filename());
    }
    if (from.has_timestamp_when_send()) {
      set_timestamp_when_send(from.timestamp_when_send());
    }
    if (from.has_partition_id()) {
      set_partition_id(from.partition_id());
    }
    if (from.has_external_checkpoint()) {
      set_external_checkpoint(from.external_checkpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRecordHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRecordHeader::CopyFrom(const PbRecordHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRecordHeader::IsInitialized() const {

  return true;
}

void PbRecordHeader::Swap(PbRecordHeader* other) {
  if (other != this) {
    std::swap(body_length_, other->body_length_);
    std::swap(record_id_, other->record_id_);
    std::swap(timestamp_in_log_, other->timestamp_in_log_);
    std::swap(timestamp_in_filename_, other->timestamp_in_filename_);
    std::swap(timestamp_when_send_, other->timestamp_when_send_);
    std::swap(partition_id_, other->partition_id_);
    std::swap(external_checkpoint_, other->external_checkpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRecordHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRecordHeader_descriptor_;
  metadata.reflection = PbRecordHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRecord::kHeaderFieldNumber;
const int PbRecord::kBodyFieldNumber;
#endif  // !_MSC_VER

PbRecord::PbRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.minos.PbRecord)
}

void PbRecord::InitAsDefaultInstance() {
  header_ = const_cast< ::baidu::minos::PbRecordHeader*>(&::baidu::minos::PbRecordHeader::default_instance());
}

PbRecord::PbRecord(const PbRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.minos.PbRecord)
}

void PbRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRecord::~PbRecord() {
  // @@protoc_insertion_point(destructor:baidu.minos.PbRecord)
  SharedDtor();
}

void PbRecord::SharedDtor() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void PbRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRecord_descriptor_;
}

const PbRecord& PbRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minos_2eproto();
  return *default_instance_;
}

PbRecord* PbRecord::default_instance_ = NULL;

PbRecord* PbRecord::New() const {
  return new PbRecord;
}

void PbRecord::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::baidu::minos::PbRecordHeader::Clear();
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.minos.PbRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .baidu.minos.PbRecordHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional bytes body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.minos.PbRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.minos.PbRecord)
  return false;
#undef DO_
}

void PbRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.minos.PbRecord)
  // optional .baidu.minos.PbRecordHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional bytes body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.minos.PbRecord)
}

::google::protobuf::uint8* PbRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.minos.PbRecord)
  // optional .baidu.minos.PbRecordHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional bytes body = 2;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.minos.PbRecord)
  return target;
}

int PbRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .baidu.minos.PbRecordHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional bytes body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRecord::MergeFrom(const PbRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::baidu::minos::PbRecordHeader::MergeFrom(from.header());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRecord::CopyFrom(const PbRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRecord::IsInitialized() const {

  return true;
}

void PbRecord::Swap(PbRecord* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRecord_descriptor_;
  metadata.reflection = PbRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAccountMessage::kTokenFieldNumber;
#endif  // !_MSC_VER

UserAccountMessage::UserAccountMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.minos.UserAccountMessage)
}

void UserAccountMessage::InitAsDefaultInstance() {
}

UserAccountMessage::UserAccountMessage(const UserAccountMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.minos.UserAccountMessage)
}

void UserAccountMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAccountMessage::~UserAccountMessage() {
  // @@protoc_insertion_point(destructor:baidu.minos.UserAccountMessage)
  SharedDtor();
}

void UserAccountMessage::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void UserAccountMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAccountMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAccountMessage_descriptor_;
}

const UserAccountMessage& UserAccountMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minos_2eproto();
  return *default_instance_;
}

UserAccountMessage* UserAccountMessage::default_instance_ = NULL;

UserAccountMessage* UserAccountMessage::New() const {
  return new UserAccountMessage;
}

void UserAccountMessage::Clear() {
  if (has_token()) {
    if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      token_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAccountMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.minos.UserAccountMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.minos.UserAccountMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.minos.UserAccountMessage)
  return false;
#undef DO_
}

void UserAccountMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.minos.UserAccountMessage)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.minos.UserAccountMessage)
}

::google::protobuf::uint8* UserAccountMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.minos.UserAccountMessage)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.minos.UserAccountMessage)
  return target;
}

int UserAccountMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAccountMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAccountMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAccountMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAccountMessage::MergeFrom(const UserAccountMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAccountMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAccountMessage::CopyFrom(const UserAccountMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAccountMessage::IsInitialized() const {

  return true;
}

void UserAccountMessage::Swap(UserAccountMessage* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAccountMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAccountMessage_descriptor_;
  metadata.reflection = UserAccountMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BrokerResponse_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerResponse_Status_descriptor_;
}
bool BrokerResponse_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BrokerResponse_Status BrokerResponse::SUCCEED;
const BrokerResponse_Status BrokerResponse::FAILED;
const BrokerResponse_Status BrokerResponse::Status_MIN;
const BrokerResponse_Status BrokerResponse::Status_MAX;
const int BrokerResponse::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BrokerResponse::kStatusFieldNumber;
const int BrokerResponse::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

BrokerResponse::BrokerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.minos.BrokerResponse)
}

void BrokerResponse::InitAsDefaultInstance() {
}

BrokerResponse::BrokerResponse(const BrokerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.minos.BrokerResponse)
}

void BrokerResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 1;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerResponse::~BrokerResponse() {
  // @@protoc_insertion_point(destructor:baidu.minos.BrokerResponse)
  SharedDtor();
}

void BrokerResponse::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void BrokerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerResponse_descriptor_;
}

const BrokerResponse& BrokerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minos_2eproto();
  return *default_instance_;
}

BrokerResponse* BrokerResponse::default_instance_ = NULL;

BrokerResponse* BrokerResponse::New() const {
  return new BrokerResponse;
}

void BrokerResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    status_ = 1;
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrokerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.minos.BrokerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .baidu.minos.BrokerResponse.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::baidu::minos::BrokerResponse_Status_IsValid(value)) {
            set_status(static_cast< ::baidu::minos::BrokerResponse_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (tag == 18) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.minos.BrokerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.minos.BrokerResponse)
  return false;
#undef DO_
}

void BrokerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.minos.BrokerResponse)
  // optional .baidu.minos.BrokerResponse.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.minos.BrokerResponse)
}

::google::protobuf::uint8* BrokerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.minos.BrokerResponse)
  // optional .baidu.minos.BrokerResponse.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.minos.BrokerResponse)
  return target;
}

int BrokerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .baidu.minos.BrokerResponse.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrokerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrokerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrokerResponse::MergeFrom(const BrokerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrokerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerResponse::CopyFrom(const BrokerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerResponse::IsInitialized() const {

  return true;
}

void BrokerResponse::Swap(BrokerResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrokerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerResponse_descriptor_;
  metadata.reflection = BrokerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeRecordRequest::kTopicIdFieldNumber;
const int SubscribeRecordRequest::kPartitionGroupIdFieldNumber;
const int SubscribeRecordRequest::kAccountFieldNumber;
const int SubscribeRecordRequest::kDataPackageIdFieldNumber;
const int SubscribeRecordRequest::kRecordCountFieldNumber;
#endif  // !_MSC_VER

SubscribeRecordRequest::SubscribeRecordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.minos.SubscribeRecordRequest)
}

void SubscribeRecordRequest::InitAsDefaultInstance() {
  account_ = const_cast< ::baidu::minos::UserAccountMessage*>(&::baidu::minos::UserAccountMessage::default_instance());
}

SubscribeRecordRequest::SubscribeRecordRequest(const SubscribeRecordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.minos.SubscribeRecordRequest)
}

void SubscribeRecordRequest::SharedCtor() {
  _cached_size_ = 0;
  topic_id_ = 0;
  partition_group_id_ = GOOGLE_LONGLONG(0);
  account_ = NULL;
  data_package_id_ = GOOGLE_LONGLONG(0);
  record_count_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeRecordRequest::~SubscribeRecordRequest() {
  // @@protoc_insertion_point(destructor:baidu.minos.SubscribeRecordRequest)
  SharedDtor();
}

void SubscribeRecordRequest::SharedDtor() {
  if (this != default_instance_) {
    delete account_;
  }
}

void SubscribeRecordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeRecordRequest_descriptor_;
}

const SubscribeRecordRequest& SubscribeRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minos_2eproto();
  return *default_instance_;
}

SubscribeRecordRequest* SubscribeRecordRequest::default_instance_ = NULL;

SubscribeRecordRequest* SubscribeRecordRequest::New() const {
  return new SubscribeRecordRequest;
}

void SubscribeRecordRequest::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    topic_id_ = 0;
    partition_group_id_ = GOOGLE_LONGLONG(0);
    if (has_account()) {
      if (account_ != NULL) account_->::baidu::minos::UserAccountMessage::Clear();
    }
    data_package_id_ = GOOGLE_LONGLONG(0);
    record_count_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.minos.SubscribeRecordRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 topic_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topic_id_)));
          set_has_topic_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_partition_group_id;
        break;
      }

      // optional int64 partition_group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_partition_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partition_group_id_)));
          set_has_partition_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional .baidu.minos.UserAccountMessage account = 3;
      case 3: {
        if (tag == 26) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_data_package_id;
        break;
      }

      // optional int64 data_package_id = 4;
      case 4: {
        if (tag == 32) {
         parse_data_package_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_package_id_)));
          set_has_data_package_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_record_count;
        break;
      }

      // optional int32 record_count = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_record_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_count_)));
          set_has_record_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.minos.SubscribeRecordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.minos.SubscribeRecordRequest)
  return false;
#undef DO_
}

void SubscribeRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.minos.SubscribeRecordRequest)
  // optional int32 topic_id = 1;
  if (has_topic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->topic_id(), output);
  }

  // optional int64 partition_group_id = 2;
  if (has_partition_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->partition_group_id(), output);
  }

  // optional .baidu.minos.UserAccountMessage account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->account(), output);
  }

  // optional int64 data_package_id = 4;
  if (has_data_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->data_package_id(), output);
  }

  // optional int32 record_count = 5 [default = 1];
  if (has_record_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->record_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.minos.SubscribeRecordRequest)
}

::google::protobuf::uint8* SubscribeRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.minos.SubscribeRecordRequest)
  // optional int32 topic_id = 1;
  if (has_topic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->topic_id(), target);
  }

  // optional int64 partition_group_id = 2;
  if (has_partition_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->partition_group_id(), target);
  }

  // optional .baidu.minos.UserAccountMessage account = 3;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->account(), target);
  }

  // optional int64 data_package_id = 4;
  if (has_data_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->data_package_id(), target);
  }

  // optional int32 record_count = 5 [default = 1];
  if (has_record_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->record_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.minos.SubscribeRecordRequest)
  return target;
}

int SubscribeRecordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 topic_id = 1;
    if (has_topic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topic_id());
    }

    // optional int64 partition_group_id = 2;
    if (has_partition_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partition_group_id());
    }

    // optional .baidu.minos.UserAccountMessage account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

    // optional int64 data_package_id = 4;
    if (has_data_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data_package_id());
    }

    // optional int32 record_count = 5 [default = 1];
    if (has_record_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->record_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeRecordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeRecordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeRecordRequest::MergeFrom(const SubscribeRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic_id()) {
      set_topic_id(from.topic_id());
    }
    if (from.has_partition_group_id()) {
      set_partition_group_id(from.partition_group_id());
    }
    if (from.has_account()) {
      mutable_account()->::baidu::minos::UserAccountMessage::MergeFrom(from.account());
    }
    if (from.has_data_package_id()) {
      set_data_package_id(from.data_package_id());
    }
    if (from.has_record_count()) {
      set_record_count(from.record_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRecordRequest::CopyFrom(const SubscribeRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRecordRequest::IsInitialized() const {

  return true;
}

void SubscribeRecordRequest::Swap(SubscribeRecordRequest* other) {
  if (other != this) {
    std::swap(topic_id_, other->topic_id_);
    std::swap(partition_group_id_, other->partition_group_id_);
    std::swap(account_, other->account_);
    std::swap(data_package_id_, other->data_package_id_);
    std::swap(record_count_, other->record_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeRecordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeRecordRequest_descriptor_;
  metadata.reflection = SubscribeRecordRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SubscribeRecordResponse_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeRecordResponse_Status_descriptor_;
}
bool SubscribeRecordResponse_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SubscribeRecordResponse_Status SubscribeRecordResponse::SUCCEED;
const SubscribeRecordResponse_Status SubscribeRecordResponse::NO_DATA_LEFT;
const SubscribeRecordResponse_Status SubscribeRecordResponse::RECORD_ID_TOO_SMALL;
const SubscribeRecordResponse_Status SubscribeRecordResponse::NO_SUCH_PARTITION_GROUP;
const SubscribeRecordResponse_Status SubscribeRecordResponse::FAILED;
const SubscribeRecordResponse_Status SubscribeRecordResponse::Status_MIN;
const SubscribeRecordResponse_Status SubscribeRecordResponse::Status_MAX;
const int SubscribeRecordResponse::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SubscribeRecordResponse::kStatusFieldNumber;
const int SubscribeRecordResponse::kErrorMessageFieldNumber;
const int SubscribeRecordResponse::kDataFieldNumber;
const int SubscribeRecordResponse::kCurDataPackageIdFieldNumber;
#endif  // !_MSC_VER

SubscribeRecordResponse::SubscribeRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.minos.SubscribeRecordResponse)
}

void SubscribeRecordResponse::InitAsDefaultInstance() {
}

SubscribeRecordResponse::SubscribeRecordResponse(const SubscribeRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.minos.SubscribeRecordResponse)
}

void SubscribeRecordResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 1;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cur_data_package_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeRecordResponse::~SubscribeRecordResponse() {
  // @@protoc_insertion_point(destructor:baidu.minos.SubscribeRecordResponse)
  SharedDtor();
}

void SubscribeRecordResponse::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void SubscribeRecordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeRecordResponse_descriptor_;
}

const SubscribeRecordResponse& SubscribeRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minos_2eproto();
  return *default_instance_;
}

SubscribeRecordResponse* SubscribeRecordResponse::default_instance_ = NULL;

SubscribeRecordResponse* SubscribeRecordResponse::New() const {
  return new SubscribeRecordResponse;
}

void SubscribeRecordResponse::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    status_ = 1;
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_message_->clear();
      }
    }
    cur_data_package_id_ = GOOGLE_LONGLONG(0);
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.minos.SubscribeRecordResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .baidu.minos.SubscribeRecordResponse.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::baidu::minos::SubscribeRecordResponse_Status_IsValid(value)) {
            set_status(static_cast< ::baidu::minos::SubscribeRecordResponse_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (tag == 18) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .baidu.minos.PbRecord data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectTag(32)) goto parse_cur_data_package_id;
        break;
      }

      // optional int64 cur_data_package_id = 4;
      case 4: {
        if (tag == 32) {
         parse_cur_data_package_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_data_package_id_)));
          set_has_cur_data_package_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.minos.SubscribeRecordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.minos.SubscribeRecordResponse)
  return false;
#undef DO_
}

void SubscribeRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.minos.SubscribeRecordResponse)
  // required .baidu.minos.SubscribeRecordResponse.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // repeated .baidu.minos.PbRecord data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  // optional int64 cur_data_package_id = 4;
  if (has_cur_data_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cur_data_package_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.minos.SubscribeRecordResponse)
}

::google::protobuf::uint8* SubscribeRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.minos.SubscribeRecordResponse)
  // required .baidu.minos.SubscribeRecordResponse.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  // repeated .baidu.minos.PbRecord data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  // optional int64 cur_data_package_id = 4;
  if (has_cur_data_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cur_data_package_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.minos.SubscribeRecordResponse)
  return target;
}

int SubscribeRecordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .baidu.minos.SubscribeRecordResponse.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional int64 cur_data_package_id = 4;
    if (has_cur_data_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_data_package_id());
    }

  }
  // repeated .baidu.minos.PbRecord data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeRecordResponse::MergeFrom(const SubscribeRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
    if (from.has_cur_data_package_id()) {
      set_cur_data_package_id(from.cur_data_package_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRecordResponse::CopyFrom(const SubscribeRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRecordResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SubscribeRecordResponse::Swap(SubscribeRecordResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_message_, other->error_message_);
    data_.Swap(&other->data_);
    std::swap(cur_data_package_id_, other->cur_data_package_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeRecordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeRecordResponse_descriptor_;
  metadata.reflection = SubscribeRecordResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InitSubscriberBrokerRequest_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitSubscriberBrokerRequest_Type_descriptor_;
}
bool InitSubscriberBrokerRequest_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InitSubscriberBrokerRequest_Type InitSubscriberBrokerRequest::TIMESTAMP;
const InitSubscriberBrokerRequest_Type InitSubscriberBrokerRequest::RECORD_ID;
const InitSubscriberBrokerRequest_Type InitSubscriberBrokerRequest::Type_MIN;
const InitSubscriberBrokerRequest_Type InitSubscriberBrokerRequest::Type_MAX;
const int InitSubscriberBrokerRequest::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* InitSubscriberBrokerRequest_StartRecordType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitSubscriberBrokerRequest_StartRecordType_descriptor_;
}
bool InitSubscriberBrokerRequest_StartRecordType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InitSubscriberBrokerRequest_StartRecordType InitSubscriberBrokerRequest::OLDEST_RECORD;
const InitSubscriberBrokerRequest_StartRecordType InitSubscriberBrokerRequest::NEWEST_RECORD;
const InitSubscriberBrokerRequest_StartRecordType InitSubscriberBrokerRequest::StartRecordType_MIN;
const InitSubscriberBrokerRequest_StartRecordType InitSubscriberBrokerRequest::StartRecordType_MAX;
const int InitSubscriberBrokerRequest::StartRecordType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InitSubscriberBrokerRequest::kTypeFieldNumber;
const int InitSubscriberBrokerRequest::kTopicIdFieldNumber;
const int InitSubscriberBrokerRequest::kPartitionGroupIdFieldNumber;
const int InitSubscriberBrokerRequest::kNeedProgressFieldNumber;
const int InitSubscriberBrokerRequest::kAccountFieldNumber;
const int InitSubscriberBrokerRequest::kStartRecordTypeFieldNumber;
const int InitSubscriberBrokerRequest::kStartTimestampFieldNumber;
#endif  // !_MSC_VER

InitSubscriberBrokerRequest::InitSubscriberBrokerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.minos.InitSubscriberBrokerRequest)
}

void InitSubscriberBrokerRequest::InitAsDefaultInstance() {
  account_ = const_cast< ::baidu::minos::UserAccountMessage*>(&::baidu::minos::UserAccountMessage::default_instance());
}

InitSubscriberBrokerRequest::InitSubscriberBrokerRequest(const InitSubscriberBrokerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.minos.InitSubscriberBrokerRequest)
}

void InitSubscriberBrokerRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  topic_id_ = 0;
  partition_group_id_ = GOOGLE_LONGLONG(0);
  need_progress_ = true;
  account_ = NULL;
  start_record_type_ = 2;
  start_timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitSubscriberBrokerRequest::~InitSubscriberBrokerRequest() {
  // @@protoc_insertion_point(destructor:baidu.minos.InitSubscriberBrokerRequest)
  SharedDtor();
}

void InitSubscriberBrokerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete account_;
  }
}

void InitSubscriberBrokerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitSubscriberBrokerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitSubscriberBrokerRequest_descriptor_;
}

const InitSubscriberBrokerRequest& InitSubscriberBrokerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minos_2eproto();
  return *default_instance_;
}

InitSubscriberBrokerRequest* InitSubscriberBrokerRequest::default_instance_ = NULL;

InitSubscriberBrokerRequest* InitSubscriberBrokerRequest::New() const {
  return new InitSubscriberBrokerRequest;
}

void InitSubscriberBrokerRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InitSubscriberBrokerRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(topic_id_, partition_group_id_);
    type_ = 1;
    need_progress_ = true;
    if (has_account()) {
      if (account_ != NULL) account_->::baidu::minos::UserAccountMessage::Clear();
    }
    start_record_type_ = 2;
    start_timestamp_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitSubscriberBrokerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.minos.InitSubscriberBrokerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .baidu.minos.InitSubscriberBrokerRequest.Type type = 1 [default = TIMESTAMP];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::baidu::minos::InitSubscriberBrokerRequest_Type_IsValid(value)) {
            set_type(static_cast< ::baidu::minos::InitSubscriberBrokerRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_topic_id;
        break;
      }

      // optional int32 topic_id = 2;
      case 2: {
        if (tag == 16) {
         parse_topic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topic_id_)));
          set_has_topic_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_partition_group_id;
        break;
      }

      // optional int64 partition_group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_partition_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partition_group_id_)));
          set_has_partition_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_need_progress;
        break;
      }

      // optional bool need_progress = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_need_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_progress_)));
          set_has_need_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }

      // optional .baidu.minos.UserAccountMessage account = 5;
      case 5: {
        if (tag == 42) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_start_record_type;
        break;
      }

      // optional .baidu.minos.InitSubscriberBrokerRequest.StartRecordType start_record_type = 6 [default = NEWEST_RECORD];
      case 6: {
        if (tag == 48) {
         parse_start_record_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::baidu::minos::InitSubscriberBrokerRequest_StartRecordType_IsValid(value)) {
            set_start_record_type(static_cast< ::baidu::minos::InitSubscriberBrokerRequest_StartRecordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_start_timestamp;
        break;
      }

      // optional int64 start_timestamp = 7;
      case 7: {
        if (tag == 56) {
         parse_start_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_timestamp_)));
          set_has_start_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.minos.InitSubscriberBrokerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.minos.InitSubscriberBrokerRequest)
  return false;
#undef DO_
}

void InitSubscriberBrokerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.minos.InitSubscriberBrokerRequest)
  // optional .baidu.minos.InitSubscriberBrokerRequest.Type type = 1 [default = TIMESTAMP];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 topic_id = 2;
  if (has_topic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->topic_id(), output);
  }

  // optional int64 partition_group_id = 3;
  if (has_partition_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->partition_group_id(), output);
  }

  // optional bool need_progress = 4 [default = true];
  if (has_need_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->need_progress(), output);
  }

  // optional .baidu.minos.UserAccountMessage account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->account(), output);
  }

  // optional .baidu.minos.InitSubscriberBrokerRequest.StartRecordType start_record_type = 6 [default = NEWEST_RECORD];
  if (has_start_record_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->start_record_type(), output);
  }

  // optional int64 start_timestamp = 7;
  if (has_start_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->start_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.minos.InitSubscriberBrokerRequest)
}

::google::protobuf::uint8* InitSubscriberBrokerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.minos.InitSubscriberBrokerRequest)
  // optional .baidu.minos.InitSubscriberBrokerRequest.Type type = 1 [default = TIMESTAMP];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 topic_id = 2;
  if (has_topic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->topic_id(), target);
  }

  // optional int64 partition_group_id = 3;
  if (has_partition_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->partition_group_id(), target);
  }

  // optional bool need_progress = 4 [default = true];
  if (has_need_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->need_progress(), target);
  }

  // optional .baidu.minos.UserAccountMessage account = 5;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->account(), target);
  }

  // optional .baidu.minos.InitSubscriberBrokerRequest.StartRecordType start_record_type = 6 [default = NEWEST_RECORD];
  if (has_start_record_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->start_record_type(), target);
  }

  // optional int64 start_timestamp = 7;
  if (has_start_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->start_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.minos.InitSubscriberBrokerRequest)
  return target;
}

int InitSubscriberBrokerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .baidu.minos.InitSubscriberBrokerRequest.Type type = 1 [default = TIMESTAMP];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 topic_id = 2;
    if (has_topic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topic_id());
    }

    // optional int64 partition_group_id = 3;
    if (has_partition_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partition_group_id());
    }

    // optional bool need_progress = 4 [default = true];
    if (has_need_progress()) {
      total_size += 1 + 1;
    }

    // optional .baidu.minos.UserAccountMessage account = 5;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

    // optional .baidu.minos.InitSubscriberBrokerRequest.StartRecordType start_record_type = 6 [default = NEWEST_RECORD];
    if (has_start_record_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->start_record_type());
    }

    // optional int64 start_timestamp = 7;
    if (has_start_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitSubscriberBrokerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitSubscriberBrokerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitSubscriberBrokerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitSubscriberBrokerRequest::MergeFrom(const InitSubscriberBrokerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_topic_id()) {
      set_topic_id(from.topic_id());
    }
    if (from.has_partition_group_id()) {
      set_partition_group_id(from.partition_group_id());
    }
    if (from.has_need_progress()) {
      set_need_progress(from.need_progress());
    }
    if (from.has_account()) {
      mutable_account()->::baidu::minos::UserAccountMessage::MergeFrom(from.account());
    }
    if (from.has_start_record_type()) {
      set_start_record_type(from.start_record_type());
    }
    if (from.has_start_timestamp()) {
      set_start_timestamp(from.start_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitSubscriberBrokerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitSubscriberBrokerRequest::CopyFrom(const InitSubscriberBrokerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitSubscriberBrokerRequest::IsInitialized() const {

  return true;
}

void InitSubscriberBrokerRequest::Swap(InitSubscriberBrokerRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(topic_id_, other->topic_id_);
    std::swap(partition_group_id_, other->partition_group_id_);
    std::swap(need_progress_, other->need_progress_);
    std::swap(account_, other->account_);
    std::swap(start_record_type_, other->start_record_type_);
    std::swap(start_timestamp_, other->start_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitSubscriberBrokerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitSubscriberBrokerRequest_descriptor_;
  metadata.reflection = InitSubscriberBrokerRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InitSubscriberBrokerResponse_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitSubscriberBrokerResponse_Status_descriptor_;
}
bool InitSubscriberBrokerResponse_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InitSubscriberBrokerResponse_Status InitSubscriberBrokerResponse::SUCCEED;
const InitSubscriberBrokerResponse_Status InitSubscriberBrokerResponse::FAILED;
const InitSubscriberBrokerResponse_Status InitSubscriberBrokerResponse::STARTING;
const InitSubscriberBrokerResponse_Status InitSubscriberBrokerResponse::Status_MIN;
const InitSubscriberBrokerResponse_Status InitSubscriberBrokerResponse::Status_MAX;
const int InitSubscriberBrokerResponse::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InitSubscriberBrokerResponse::kStatusFieldNumber;
const int InitSubscriberBrokerResponse::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

InitSubscriberBrokerResponse::InitSubscriberBrokerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.minos.InitSubscriberBrokerResponse)
}

void InitSubscriberBrokerResponse::InitAsDefaultInstance() {
}

InitSubscriberBrokerResponse::InitSubscriberBrokerResponse(const InitSubscriberBrokerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.minos.InitSubscriberBrokerResponse)
}

void InitSubscriberBrokerResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitSubscriberBrokerResponse::~InitSubscriberBrokerResponse() {
  // @@protoc_insertion_point(destructor:baidu.minos.InitSubscriberBrokerResponse)
  SharedDtor();
}

void InitSubscriberBrokerResponse::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void InitSubscriberBrokerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitSubscriberBrokerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitSubscriberBrokerResponse_descriptor_;
}

const InitSubscriberBrokerResponse& InitSubscriberBrokerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minos_2eproto();
  return *default_instance_;
}

InitSubscriberBrokerResponse* InitSubscriberBrokerResponse::default_instance_ = NULL;

InitSubscriberBrokerResponse* InitSubscriberBrokerResponse::New() const {
  return new InitSubscriberBrokerResponse;
}

void InitSubscriberBrokerResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    status_ = 0;
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitSubscriberBrokerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.minos.InitSubscriberBrokerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .baidu.minos.InitSubscriberBrokerResponse.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::baidu::minos::InitSubscriberBrokerResponse_Status_IsValid(value)) {
            set_status(static_cast< ::baidu::minos::InitSubscriberBrokerResponse_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (tag == 18) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.minos.InitSubscriberBrokerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.minos.InitSubscriberBrokerResponse)
  return false;
#undef DO_
}

void InitSubscriberBrokerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.minos.InitSubscriberBrokerResponse)
  // required .baidu.minos.InitSubscriberBrokerResponse.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.minos.InitSubscriberBrokerResponse)
}

::google::protobuf::uint8* InitSubscriberBrokerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.minos.InitSubscriberBrokerResponse)
  // required .baidu.minos.InitSubscriberBrokerResponse.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.minos.InitSubscriberBrokerResponse)
  return target;
}

int InitSubscriberBrokerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .baidu.minos.InitSubscriberBrokerResponse.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitSubscriberBrokerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitSubscriberBrokerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitSubscriberBrokerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitSubscriberBrokerResponse::MergeFrom(const InitSubscriberBrokerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitSubscriberBrokerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitSubscriberBrokerResponse::CopyFrom(const InitSubscriberBrokerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitSubscriberBrokerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InitSubscriberBrokerResponse::Swap(InitSubscriberBrokerResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitSubscriberBrokerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitSubscriberBrokerResponse_descriptor_;
  metadata.reflection = InitSubscriberBrokerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UninitSubscriberBrokerRequest::kTopicIdFieldNumber;
const int UninitSubscriberBrokerRequest::kPartitionGroupIdFieldNumber;
const int UninitSubscriberBrokerRequest::kAccountFieldNumber;
#endif  // !_MSC_VER

UninitSubscriberBrokerRequest::UninitSubscriberBrokerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.minos.UninitSubscriberBrokerRequest)
}

void UninitSubscriberBrokerRequest::InitAsDefaultInstance() {
  account_ = const_cast< ::baidu::minos::UserAccountMessage*>(&::baidu::minos::UserAccountMessage::default_instance());
}

UninitSubscriberBrokerRequest::UninitSubscriberBrokerRequest(const UninitSubscriberBrokerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.minos.UninitSubscriberBrokerRequest)
}

void UninitSubscriberBrokerRequest::SharedCtor() {
  _cached_size_ = 0;
  topic_id_ = 0;
  partition_group_id_ = GOOGLE_LONGLONG(0);
  account_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UninitSubscriberBrokerRequest::~UninitSubscriberBrokerRequest() {
  // @@protoc_insertion_point(destructor:baidu.minos.UninitSubscriberBrokerRequest)
  SharedDtor();
}

void UninitSubscriberBrokerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete account_;
  }
}

void UninitSubscriberBrokerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UninitSubscriberBrokerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UninitSubscriberBrokerRequest_descriptor_;
}

const UninitSubscriberBrokerRequest& UninitSubscriberBrokerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minos_2eproto();
  return *default_instance_;
}

UninitSubscriberBrokerRequest* UninitSubscriberBrokerRequest::default_instance_ = NULL;

UninitSubscriberBrokerRequest* UninitSubscriberBrokerRequest::New() const {
  return new UninitSubscriberBrokerRequest;
}

void UninitSubscriberBrokerRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    topic_id_ = 0;
    partition_group_id_ = GOOGLE_LONGLONG(0);
    if (has_account()) {
      if (account_ != NULL) account_->::baidu::minos::UserAccountMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UninitSubscriberBrokerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.minos.UninitSubscriberBrokerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 topic_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topic_id_)));
          set_has_topic_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_partition_group_id;
        break;
      }

      // optional int64 partition_group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_partition_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partition_group_id_)));
          set_has_partition_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional .baidu.minos.UserAccountMessage account = 3;
      case 3: {
        if (tag == 26) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.minos.UninitSubscriberBrokerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.minos.UninitSubscriberBrokerRequest)
  return false;
#undef DO_
}

void UninitSubscriberBrokerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.minos.UninitSubscriberBrokerRequest)
  // optional int32 topic_id = 1;
  if (has_topic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->topic_id(), output);
  }

  // optional int64 partition_group_id = 2;
  if (has_partition_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->partition_group_id(), output);
  }

  // optional .baidu.minos.UserAccountMessage account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.minos.UninitSubscriberBrokerRequest)
}

::google::protobuf::uint8* UninitSubscriberBrokerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.minos.UninitSubscriberBrokerRequest)
  // optional int32 topic_id = 1;
  if (has_topic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->topic_id(), target);
  }

  // optional int64 partition_group_id = 2;
  if (has_partition_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->partition_group_id(), target);
  }

  // optional .baidu.minos.UserAccountMessage account = 3;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.minos.UninitSubscriberBrokerRequest)
  return target;
}

int UninitSubscriberBrokerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 topic_id = 1;
    if (has_topic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topic_id());
    }

    // optional int64 partition_group_id = 2;
    if (has_partition_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partition_group_id());
    }

    // optional .baidu.minos.UserAccountMessage account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UninitSubscriberBrokerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UninitSubscriberBrokerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UninitSubscriberBrokerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UninitSubscriberBrokerRequest::MergeFrom(const UninitSubscriberBrokerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic_id()) {
      set_topic_id(from.topic_id());
    }
    if (from.has_partition_group_id()) {
      set_partition_group_id(from.partition_group_id());
    }
    if (from.has_account()) {
      mutable_account()->::baidu::minos::UserAccountMessage::MergeFrom(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UninitSubscriberBrokerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UninitSubscriberBrokerRequest::CopyFrom(const UninitSubscriberBrokerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UninitSubscriberBrokerRequest::IsInitialized() const {

  return true;
}

void UninitSubscriberBrokerRequest::Swap(UninitSubscriberBrokerRequest* other) {
  if (other != this) {
    std::swap(topic_id_, other->topic_id_);
    std::swap(partition_group_id_, other->partition_group_id_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UninitSubscriberBrokerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UninitSubscriberBrokerRequest_descriptor_;
  metadata.reflection = UninitSubscriberBrokerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PartitionProgress::kPartitionIdFieldNumber;
const int PartitionProgress::kLastSendedMaxRecordIdFieldNumber;
const int PartitionProgress::kCurSendedMaxRecordIdFieldNumber;
#endif  // !_MSC_VER

PartitionProgress::PartitionProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.minos.PartitionProgress)
}

void PartitionProgress::InitAsDefaultInstance() {
}

PartitionProgress::PartitionProgress(const PartitionProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.minos.PartitionProgress)
}

void PartitionProgress::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = GOOGLE_LONGLONG(0);
  last_sended_max_record_id_ = GOOGLE_LONGLONG(0);
  cur_sended_max_record_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartitionProgress::~PartitionProgress() {
  // @@protoc_insertion_point(destructor:baidu.minos.PartitionProgress)
  SharedDtor();
}

void PartitionProgress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PartitionProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartitionProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartitionProgress_descriptor_;
}

const PartitionProgress& PartitionProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minos_2eproto();
  return *default_instance_;
}

PartitionProgress* PartitionProgress::default_instance_ = NULL;

PartitionProgress* PartitionProgress::New() const {
  return new PartitionProgress;
}

void PartitionProgress::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PartitionProgress*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(partition_id_, cur_sended_max_record_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartitionProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.minos.PartitionProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 partition_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partition_id_)));
          set_has_partition_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_sended_max_record_id;
        break;
      }

      // optional int64 last_sended_max_record_id = 2;
      case 2: {
        if (tag == 16) {
         parse_last_sended_max_record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_sended_max_record_id_)));
          set_has_last_sended_max_record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cur_sended_max_record_id;
        break;
      }

      // optional int64 cur_sended_max_record_id = 3;
      case 3: {
        if (tag == 24) {
         parse_cur_sended_max_record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_sended_max_record_id_)));
          set_has_cur_sended_max_record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.minos.PartitionProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.minos.PartitionProgress)
  return false;
#undef DO_
}

void PartitionProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.minos.PartitionProgress)
  // optional int64 partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->partition_id(), output);
  }

  // optional int64 last_sended_max_record_id = 2;
  if (has_last_sended_max_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_sended_max_record_id(), output);
  }

  // optional int64 cur_sended_max_record_id = 3;
  if (has_cur_sended_max_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cur_sended_max_record_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.minos.PartitionProgress)
}

::google::protobuf::uint8* PartitionProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.minos.PartitionProgress)
  // optional int64 partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->partition_id(), target);
  }

  // optional int64 last_sended_max_record_id = 2;
  if (has_last_sended_max_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_sended_max_record_id(), target);
  }

  // optional int64 cur_sended_max_record_id = 3;
  if (has_cur_sended_max_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cur_sended_max_record_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.minos.PartitionProgress)
  return target;
}

int PartitionProgress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partition_id());
    }

    // optional int64 last_sended_max_record_id = 2;
    if (has_last_sended_max_record_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_sended_max_record_id());
    }

    // optional int64 cur_sended_max_record_id = 3;
    if (has_cur_sended_max_record_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_sended_max_record_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartitionProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartitionProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartitionProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartitionProgress::MergeFrom(const PartitionProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      set_partition_id(from.partition_id());
    }
    if (from.has_last_sended_max_record_id()) {
      set_last_sended_max_record_id(from.last_sended_max_record_id());
    }
    if (from.has_cur_sended_max_record_id()) {
      set_cur_sended_max_record_id(from.cur_sended_max_record_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartitionProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionProgress::CopyFrom(const PartitionProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionProgress::IsInitialized() const {

  return true;
}

void PartitionProgress::Swap(PartitionProgress* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(last_sended_max_record_id_, other->last_sended_max_record_id_);
    std::swap(cur_sended_max_record_id_, other->cur_sended_max_record_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartitionProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartitionProgress_descriptor_;
  metadata.reflection = PartitionProgress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PartitionGroupProgress::kTopicIdFieldNumber;
const int PartitionGroupProgress::kPartitionGroupIdFieldNumber;
const int PartitionGroupProgress::kCurDataPackageIdFieldNumber;
const int PartitionGroupProgress::kCurPartitionIdFieldNumber;
const int PartitionGroupProgress::kProgressFieldNumber;
const int PartitionGroupProgress::kAccountFieldNumber;
#endif  // !_MSC_VER

PartitionGroupProgress::PartitionGroupProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.minos.PartitionGroupProgress)
}

void PartitionGroupProgress::InitAsDefaultInstance() {
  account_ = const_cast< ::baidu::minos::UserAccountMessage*>(&::baidu::minos::UserAccountMessage::default_instance());
}

PartitionGroupProgress::PartitionGroupProgress(const PartitionGroupProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.minos.PartitionGroupProgress)
}

void PartitionGroupProgress::SharedCtor() {
  _cached_size_ = 0;
  topic_id_ = 0;
  partition_group_id_ = 0;
  cur_data_package_id_ = GOOGLE_LONGLONG(0);
  cur_partition_id_ = GOOGLE_LONGLONG(0);
  account_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartitionGroupProgress::~PartitionGroupProgress() {
  // @@protoc_insertion_point(destructor:baidu.minos.PartitionGroupProgress)
  SharedDtor();
}

void PartitionGroupProgress::SharedDtor() {
  if (this != default_instance_) {
    delete account_;
  }
}

void PartitionGroupProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartitionGroupProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartitionGroupProgress_descriptor_;
}

const PartitionGroupProgress& PartitionGroupProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minos_2eproto();
  return *default_instance_;
}

PartitionGroupProgress* PartitionGroupProgress::default_instance_ = NULL;

PartitionGroupProgress* PartitionGroupProgress::New() const {
  return new PartitionGroupProgress;
}

void PartitionGroupProgress::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PartitionGroupProgress*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(topic_id_, cur_partition_id_);
    if (has_account()) {
      if (account_ != NULL) account_->::baidu::minos::UserAccountMessage::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  progress_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartitionGroupProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.minos.PartitionGroupProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 topic_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topic_id_)));
          set_has_topic_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_partition_group_id;
        break;
      }

      // optional int32 partition_group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_partition_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_group_id_)));
          set_has_partition_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cur_data_package_id;
        break;
      }

      // optional int64 cur_data_package_id = 3;
      case 3: {
        if (tag == 24) {
         parse_cur_data_package_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_data_package_id_)));
          set_has_cur_data_package_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cur_partition_id;
        break;
      }

      // optional int64 cur_partition_id = 4;
      case 4: {
        if (tag == 32) {
         parse_cur_partition_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_partition_id_)));
          set_has_cur_partition_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_progress;
        break;
      }

      // repeated .baidu.minos.PartitionProgress progress = 5;
      case 5: {
        if (tag == 42) {
         parse_progress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_progress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_progress;
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional .baidu.minos.UserAccountMessage account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.minos.PartitionGroupProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.minos.PartitionGroupProgress)
  return false;
#undef DO_
}

void PartitionGroupProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.minos.PartitionGroupProgress)
  // optional int32 topic_id = 1;
  if (has_topic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->topic_id(), output);
  }

  // optional int32 partition_group_id = 2;
  if (has_partition_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->partition_group_id(), output);
  }

  // optional int64 cur_data_package_id = 3;
  if (has_cur_data_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cur_data_package_id(), output);
  }

  // optional int64 cur_partition_id = 4;
  if (has_cur_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cur_partition_id(), output);
  }

  // repeated .baidu.minos.PartitionProgress progress = 5;
  for (int i = 0; i < this->progress_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->progress(i), output);
  }

  // optional .baidu.minos.UserAccountMessage account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.minos.PartitionGroupProgress)
}

::google::protobuf::uint8* PartitionGroupProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.minos.PartitionGroupProgress)
  // optional int32 topic_id = 1;
  if (has_topic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->topic_id(), target);
  }

  // optional int32 partition_group_id = 2;
  if (has_partition_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->partition_group_id(), target);
  }

  // optional int64 cur_data_package_id = 3;
  if (has_cur_data_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cur_data_package_id(), target);
  }

  // optional int64 cur_partition_id = 4;
  if (has_cur_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cur_partition_id(), target);
  }

  // repeated .baidu.minos.PartitionProgress progress = 5;
  for (int i = 0; i < this->progress_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->progress(i), target);
  }

  // optional .baidu.minos.UserAccountMessage account = 6;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.minos.PartitionGroupProgress)
  return target;
}

int PartitionGroupProgress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 topic_id = 1;
    if (has_topic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topic_id());
    }

    // optional int32 partition_group_id = 2;
    if (has_partition_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition_group_id());
    }

    // optional int64 cur_data_package_id = 3;
    if (has_cur_data_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_data_package_id());
    }

    // optional int64 cur_partition_id = 4;
    if (has_cur_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_partition_id());
    }

    // optional .baidu.minos.UserAccountMessage account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

  }
  // repeated .baidu.minos.PartitionProgress progress = 5;
  total_size += 1 * this->progress_size();
  for (int i = 0; i < this->progress_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->progress(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartitionGroupProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartitionGroupProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartitionGroupProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartitionGroupProgress::MergeFrom(const PartitionGroupProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  progress_.MergeFrom(from.progress_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic_id()) {
      set_topic_id(from.topic_id());
    }
    if (from.has_partition_group_id()) {
      set_partition_group_id(from.partition_group_id());
    }
    if (from.has_cur_data_package_id()) {
      set_cur_data_package_id(from.cur_data_package_id());
    }
    if (from.has_cur_partition_id()) {
      set_cur_partition_id(from.cur_partition_id());
    }
    if (from.has_account()) {
      mutable_account()->::baidu::minos::UserAccountMessage::MergeFrom(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartitionGroupProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionGroupProgress::CopyFrom(const PartitionGroupProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionGroupProgress::IsInitialized() const {

  return true;
}

void PartitionGroupProgress::Swap(PartitionGroupProgress* other) {
  if (other != this) {
    std::swap(topic_id_, other->topic_id_);
    std::swap(partition_group_id_, other->partition_group_id_);
    std::swap(cur_data_package_id_, other->cur_data_package_id_);
    std::swap(cur_partition_id_, other->cur_partition_id_);
    progress_.Swap(&other->progress_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartitionGroupProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartitionGroupProgress_descriptor_;
  metadata.reflection = PartitionGroupProgress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPartitionGroupProgressRequest::kPgProgressFieldNumber;
#endif  // !_MSC_VER

SetPartitionGroupProgressRequest::SetPartitionGroupProgressRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.minos.SetPartitionGroupProgressRequest)
}

void SetPartitionGroupProgressRequest::InitAsDefaultInstance() {
  pg_progress_ = const_cast< ::baidu::minos::PartitionGroupProgress*>(&::baidu::minos::PartitionGroupProgress::default_instance());
}

SetPartitionGroupProgressRequest::SetPartitionGroupProgressRequest(const SetPartitionGroupProgressRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.minos.SetPartitionGroupProgressRequest)
}

void SetPartitionGroupProgressRequest::SharedCtor() {
  _cached_size_ = 0;
  pg_progress_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPartitionGroupProgressRequest::~SetPartitionGroupProgressRequest() {
  // @@protoc_insertion_point(destructor:baidu.minos.SetPartitionGroupProgressRequest)
  SharedDtor();
}

void SetPartitionGroupProgressRequest::SharedDtor() {
  if (this != default_instance_) {
    delete pg_progress_;
  }
}

void SetPartitionGroupProgressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPartitionGroupProgressRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPartitionGroupProgressRequest_descriptor_;
}

const SetPartitionGroupProgressRequest& SetPartitionGroupProgressRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minos_2eproto();
  return *default_instance_;
}

SetPartitionGroupProgressRequest* SetPartitionGroupProgressRequest::default_instance_ = NULL;

SetPartitionGroupProgressRequest* SetPartitionGroupProgressRequest::New() const {
  return new SetPartitionGroupProgressRequest;
}

void SetPartitionGroupProgressRequest::Clear() {
  if (has_pg_progress()) {
    if (pg_progress_ != NULL) pg_progress_->::baidu::minos::PartitionGroupProgress::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPartitionGroupProgressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.minos.SetPartitionGroupProgressRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .baidu.minos.PartitionGroupProgress pg_progress = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pg_progress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.minos.SetPartitionGroupProgressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.minos.SetPartitionGroupProgressRequest)
  return false;
#undef DO_
}

void SetPartitionGroupProgressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.minos.SetPartitionGroupProgressRequest)
  // optional .baidu.minos.PartitionGroupProgress pg_progress = 1;
  if (has_pg_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pg_progress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.minos.SetPartitionGroupProgressRequest)
}

::google::protobuf::uint8* SetPartitionGroupProgressRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.minos.SetPartitionGroupProgressRequest)
  // optional .baidu.minos.PartitionGroupProgress pg_progress = 1;
  if (has_pg_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pg_progress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.minos.SetPartitionGroupProgressRequest)
  return target;
}

int SetPartitionGroupProgressRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .baidu.minos.PartitionGroupProgress pg_progress = 1;
    if (has_pg_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pg_progress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPartitionGroupProgressRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPartitionGroupProgressRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPartitionGroupProgressRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPartitionGroupProgressRequest::MergeFrom(const SetPartitionGroupProgressRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pg_progress()) {
      mutable_pg_progress()->::baidu::minos::PartitionGroupProgress::MergeFrom(from.pg_progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPartitionGroupProgressRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPartitionGroupProgressRequest::CopyFrom(const SetPartitionGroupProgressRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPartitionGroupProgressRequest::IsInitialized() const {

  return true;
}

void SetPartitionGroupProgressRequest::Swap(SetPartitionGroupProgressRequest* other) {
  if (other != this) {
    std::swap(pg_progress_, other->pg_progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPartitionGroupProgressRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPartitionGroupProgressRequest_descriptor_;
  metadata.reflection = SetPartitionGroupProgressRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPartitionGroupProgressRequest::kTopicIdFieldNumber;
const int GetPartitionGroupProgressRequest::kPartitionGroupIdFieldNumber;
const int GetPartitionGroupProgressRequest::kAccountFieldNumber;
#endif  // !_MSC_VER

GetPartitionGroupProgressRequest::GetPartitionGroupProgressRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.minos.GetPartitionGroupProgressRequest)
}

void GetPartitionGroupProgressRequest::InitAsDefaultInstance() {
  account_ = const_cast< ::baidu::minos::UserAccountMessage*>(&::baidu::minos::UserAccountMessage::default_instance());
}

GetPartitionGroupProgressRequest::GetPartitionGroupProgressRequest(const GetPartitionGroupProgressRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.minos.GetPartitionGroupProgressRequest)
}

void GetPartitionGroupProgressRequest::SharedCtor() {
  _cached_size_ = 0;
  topic_id_ = 0;
  partition_group_id_ = GOOGLE_LONGLONG(0);
  account_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPartitionGroupProgressRequest::~GetPartitionGroupProgressRequest() {
  // @@protoc_insertion_point(destructor:baidu.minos.GetPartitionGroupProgressRequest)
  SharedDtor();
}

void GetPartitionGroupProgressRequest::SharedDtor() {
  if (this != default_instance_) {
    delete account_;
  }
}

void GetPartitionGroupProgressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPartitionGroupProgressRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPartitionGroupProgressRequest_descriptor_;
}

const GetPartitionGroupProgressRequest& GetPartitionGroupProgressRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minos_2eproto();
  return *default_instance_;
}

GetPartitionGroupProgressRequest* GetPartitionGroupProgressRequest::default_instance_ = NULL;

GetPartitionGroupProgressRequest* GetPartitionGroupProgressRequest::New() const {
  return new GetPartitionGroupProgressRequest;
}

void GetPartitionGroupProgressRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    topic_id_ = 0;
    partition_group_id_ = GOOGLE_LONGLONG(0);
    if (has_account()) {
      if (account_ != NULL) account_->::baidu::minos::UserAccountMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPartitionGroupProgressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.minos.GetPartitionGroupProgressRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 topic_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topic_id_)));
          set_has_topic_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_partition_group_id;
        break;
      }

      // optional int64 partition_group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_partition_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partition_group_id_)));
          set_has_partition_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional .baidu.minos.UserAccountMessage account = 3;
      case 3: {
        if (tag == 26) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.minos.GetPartitionGroupProgressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.minos.GetPartitionGroupProgressRequest)
  return false;
#undef DO_
}

void GetPartitionGroupProgressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.minos.GetPartitionGroupProgressRequest)
  // optional int32 topic_id = 1;
  if (has_topic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->topic_id(), output);
  }

  // optional int64 partition_group_id = 2;
  if (has_partition_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->partition_group_id(), output);
  }

  // optional .baidu.minos.UserAccountMessage account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.minos.GetPartitionGroupProgressRequest)
}

::google::protobuf::uint8* GetPartitionGroupProgressRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.minos.GetPartitionGroupProgressRequest)
  // optional int32 topic_id = 1;
  if (has_topic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->topic_id(), target);
  }

  // optional int64 partition_group_id = 2;
  if (has_partition_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->partition_group_id(), target);
  }

  // optional .baidu.minos.UserAccountMessage account = 3;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.minos.GetPartitionGroupProgressRequest)
  return target;
}

int GetPartitionGroupProgressRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 topic_id = 1;
    if (has_topic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topic_id());
    }

    // optional int64 partition_group_id = 2;
    if (has_partition_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partition_group_id());
    }

    // optional .baidu.minos.UserAccountMessage account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPartitionGroupProgressRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPartitionGroupProgressRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPartitionGroupProgressRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPartitionGroupProgressRequest::MergeFrom(const GetPartitionGroupProgressRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic_id()) {
      set_topic_id(from.topic_id());
    }
    if (from.has_partition_group_id()) {
      set_partition_group_id(from.partition_group_id());
    }
    if (from.has_account()) {
      mutable_account()->::baidu::minos::UserAccountMessage::MergeFrom(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPartitionGroupProgressRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPartitionGroupProgressRequest::CopyFrom(const GetPartitionGroupProgressRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPartitionGroupProgressRequest::IsInitialized() const {

  return true;
}

void GetPartitionGroupProgressRequest::Swap(GetPartitionGroupProgressRequest* other) {
  if (other != this) {
    std::swap(topic_id_, other->topic_id_);
    std::swap(partition_group_id_, other->partition_group_id_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPartitionGroupProgressRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPartitionGroupProgressRequest_descriptor_;
  metadata.reflection = GetPartitionGroupProgressRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GetPartitionGroupProgressResponse_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPartitionGroupProgressResponse_Status_descriptor_;
}
bool GetPartitionGroupProgressResponse_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetPartitionGroupProgressResponse_Status GetPartitionGroupProgressResponse::SUCCEED;
const GetPartitionGroupProgressResponse_Status GetPartitionGroupProgressResponse::FAILED;
const GetPartitionGroupProgressResponse_Status GetPartitionGroupProgressResponse::Status_MIN;
const GetPartitionGroupProgressResponse_Status GetPartitionGroupProgressResponse::Status_MAX;
const int GetPartitionGroupProgressResponse::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetPartitionGroupProgressResponse::kStatusFieldNumber;
const int GetPartitionGroupProgressResponse::kErrorMessageFieldNumber;
const int GetPartitionGroupProgressResponse::kPgProgressFieldNumber;
#endif  // !_MSC_VER

GetPartitionGroupProgressResponse::GetPartitionGroupProgressResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.minos.GetPartitionGroupProgressResponse)
}

void GetPartitionGroupProgressResponse::InitAsDefaultInstance() {
  pg_progress_ = const_cast< ::baidu::minos::PartitionGroupProgress*>(&::baidu::minos::PartitionGroupProgress::default_instance());
}

GetPartitionGroupProgressResponse::GetPartitionGroupProgressResponse(const GetPartitionGroupProgressResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.minos.GetPartitionGroupProgressResponse)
}

void GetPartitionGroupProgressResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pg_progress_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPartitionGroupProgressResponse::~GetPartitionGroupProgressResponse() {
  // @@protoc_insertion_point(destructor:baidu.minos.GetPartitionGroupProgressResponse)
  SharedDtor();
}

void GetPartitionGroupProgressResponse::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_message_;
  }
  if (this != default_instance_) {
    delete pg_progress_;
  }
}

void GetPartitionGroupProgressResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPartitionGroupProgressResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPartitionGroupProgressResponse_descriptor_;
}

const GetPartitionGroupProgressResponse& GetPartitionGroupProgressResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minos_2eproto();
  return *default_instance_;
}

GetPartitionGroupProgressResponse* GetPartitionGroupProgressResponse::default_instance_ = NULL;

GetPartitionGroupProgressResponse* GetPartitionGroupProgressResponse::New() const {
  return new GetPartitionGroupProgressResponse;
}

void GetPartitionGroupProgressResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    status_ = 0;
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_message_->clear();
      }
    }
    if (has_pg_progress()) {
      if (pg_progress_ != NULL) pg_progress_->::baidu::minos::PartitionGroupProgress::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPartitionGroupProgressResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.minos.GetPartitionGroupProgressResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .baidu.minos.GetPartitionGroupProgressResponse.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::baidu::minos::GetPartitionGroupProgressResponse_Status_IsValid(value)) {
            set_status(static_cast< ::baidu::minos::GetPartitionGroupProgressResponse_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (tag == 18) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pg_progress;
        break;
      }

      // optional .baidu.minos.PartitionGroupProgress pg_progress = 3;
      case 3: {
        if (tag == 26) {
         parse_pg_progress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pg_progress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.minos.GetPartitionGroupProgressResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.minos.GetPartitionGroupProgressResponse)
  return false;
#undef DO_
}

void GetPartitionGroupProgressResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.minos.GetPartitionGroupProgressResponse)
  // required .baidu.minos.GetPartitionGroupProgressResponse.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // optional .baidu.minos.PartitionGroupProgress pg_progress = 3;
  if (has_pg_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pg_progress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.minos.GetPartitionGroupProgressResponse)
}

::google::protobuf::uint8* GetPartitionGroupProgressResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.minos.GetPartitionGroupProgressResponse)
  // required .baidu.minos.GetPartitionGroupProgressResponse.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  // optional .baidu.minos.PartitionGroupProgress pg_progress = 3;
  if (has_pg_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pg_progress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.minos.GetPartitionGroupProgressResponse)
  return target;
}

int GetPartitionGroupProgressResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .baidu.minos.GetPartitionGroupProgressResponse.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional .baidu.minos.PartitionGroupProgress pg_progress = 3;
    if (has_pg_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pg_progress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPartitionGroupProgressResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPartitionGroupProgressResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPartitionGroupProgressResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPartitionGroupProgressResponse::MergeFrom(const GetPartitionGroupProgressResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
    if (from.has_pg_progress()) {
      mutable_pg_progress()->::baidu::minos::PartitionGroupProgress::MergeFrom(from.pg_progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPartitionGroupProgressResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPartitionGroupProgressResponse::CopyFrom(const GetPartitionGroupProgressResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPartitionGroupProgressResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetPartitionGroupProgressResponse::Swap(GetPartitionGroupProgressResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_message_, other->error_message_);
    std::swap(pg_progress_, other->pg_progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPartitionGroupProgressResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPartitionGroupProgressResponse_descriptor_;
  metadata.reflection = GetPartitionGroupProgressResponse_reflection_;
  return metadata;
}


// ===================================================================

BrokerService::~BrokerService() {}

const ::google::protobuf::ServiceDescriptor* BrokerService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* BrokerService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerService_descriptor_;
}

void BrokerService::init_subscriber(::google::protobuf::RpcController* controller,
                         const ::baidu::minos::InitSubscriberBrokerRequest*,
                         ::baidu::minos::InitSubscriberBrokerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method init_subscriber() not implemented.");
  done->Run();
}

void BrokerService::uninit_subscriber(::google::protobuf::RpcController* controller,
                         const ::baidu::minos::UninitSubscriberBrokerRequest*,
                         ::baidu::minos::BrokerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method uninit_subscriber() not implemented.");
  done->Run();
}

void BrokerService::set_partition_group_progress(::google::protobuf::RpcController* controller,
                         const ::baidu::minos::SetPartitionGroupProgressRequest*,
                         ::baidu::minos::BrokerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method set_partition_group_progress() not implemented.");
  done->Run();
}

void BrokerService::get_partition_group_progress(::google::protobuf::RpcController* controller,
                         const ::baidu::minos::GetPartitionGroupProgressRequest*,
                         ::baidu::minos::GetPartitionGroupProgressResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method get_partition_group_progress() not implemented.");
  done->Run();
}

void BrokerService::subscribe_record(::google::protobuf::RpcController* controller,
                         const ::baidu::minos::SubscribeRecordRequest*,
                         ::baidu::minos::SubscribeRecordResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method subscribe_record() not implemented.");
  done->Run();
}

void BrokerService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), BrokerService_descriptor_);
  switch(method->index()) {
    case 0:
      init_subscriber(controller,
             ::google::protobuf::down_cast<const ::baidu::minos::InitSubscriberBrokerRequest*>(request),
             ::google::protobuf::down_cast< ::baidu::minos::InitSubscriberBrokerResponse*>(response),
             done);
      break;
    case 1:
      uninit_subscriber(controller,
             ::google::protobuf::down_cast<const ::baidu::minos::UninitSubscriberBrokerRequest*>(request),
             ::google::protobuf::down_cast< ::baidu::minos::BrokerResponse*>(response),
             done);
      break;
    case 2:
      set_partition_group_progress(controller,
             ::google::protobuf::down_cast<const ::baidu::minos::SetPartitionGroupProgressRequest*>(request),
             ::google::protobuf::down_cast< ::baidu::minos::BrokerResponse*>(response),
             done);
      break;
    case 3:
      get_partition_group_progress(controller,
             ::google::protobuf::down_cast<const ::baidu::minos::GetPartitionGroupProgressRequest*>(request),
             ::google::protobuf::down_cast< ::baidu::minos::GetPartitionGroupProgressResponse*>(response),
             done);
      break;
    case 4:
      subscribe_record(controller,
             ::google::protobuf::down_cast<const ::baidu::minos::SubscribeRecordRequest*>(request),
             ::google::protobuf::down_cast< ::baidu::minos::SubscribeRecordResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& BrokerService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::baidu::minos::InitSubscriberBrokerRequest::default_instance();
    case 1:
      return ::baidu::minos::UninitSubscriberBrokerRequest::default_instance();
    case 2:
      return ::baidu::minos::SetPartitionGroupProgressRequest::default_instance();
    case 3:
      return ::baidu::minos::GetPartitionGroupProgressRequest::default_instance();
    case 4:
      return ::baidu::minos::SubscribeRecordRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& BrokerService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::baidu::minos::InitSubscriberBrokerResponse::default_instance();
    case 1:
      return ::baidu::minos::BrokerResponse::default_instance();
    case 2:
      return ::baidu::minos::BrokerResponse::default_instance();
    case 3:
      return ::baidu::minos::GetPartitionGroupProgressResponse::default_instance();
    case 4:
      return ::baidu::minos::SubscribeRecordResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

BrokerService_Stub::BrokerService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
BrokerService_Stub::BrokerService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
BrokerService_Stub::~BrokerService_Stub() {
  if (owns_channel_) delete channel_;
}

void BrokerService_Stub::init_subscriber(::google::protobuf::RpcController* controller,
                              const ::baidu::minos::InitSubscriberBrokerRequest* request,
                              ::baidu::minos::InitSubscriberBrokerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void BrokerService_Stub::uninit_subscriber(::google::protobuf::RpcController* controller,
                              const ::baidu::minos::UninitSubscriberBrokerRequest* request,
                              ::baidu::minos::BrokerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void BrokerService_Stub::set_partition_group_progress(::google::protobuf::RpcController* controller,
                              const ::baidu::minos::SetPartitionGroupProgressRequest* request,
                              ::baidu::minos::BrokerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void BrokerService_Stub::get_partition_group_progress(::google::protobuf::RpcController* controller,
                              const ::baidu::minos::GetPartitionGroupProgressRequest* request,
                              ::baidu::minos::GetPartitionGroupProgressResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void BrokerService_Stub::subscribe_record(::google::protobuf::RpcController* controller,
                              const ::baidu::minos::SubscribeRecordRequest* request,
                              ::baidu::minos::SubscribeRecordResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace minos
}  // namespace baidu

// @@protoc_insertion_point(global_scope)
