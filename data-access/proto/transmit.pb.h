// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transmit.proto

#ifndef PROTOBUF_transmit_2eproto__INCLUDED
#define PROTOBUF_transmit_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace transmit {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_transmit_2eproto();
void protobuf_AssignDesc_transmit_2eproto();
void protobuf_ShutdownFile_transmit_2eproto();

class MapEntry;
class TransmitRequest;
class TransmitResponse;

enum TransmitResponse_Res_Status {
  TransmitResponse_Res_Status_SUCCEED = 0,
  TransmitResponse_Res_Status_FAILED = 1
};
bool TransmitResponse_Res_Status_IsValid(int value);
const TransmitResponse_Res_Status TransmitResponse_Res_Status_Res_Status_MIN = TransmitResponse_Res_Status_SUCCEED;
const TransmitResponse_Res_Status TransmitResponse_Res_Status_Res_Status_MAX = TransmitResponse_Res_Status_FAILED;
const int TransmitResponse_Res_Status_Res_Status_ARRAYSIZE = TransmitResponse_Res_Status_Res_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransmitResponse_Res_Status_descriptor();
inline const ::std::string& TransmitResponse_Res_Status_Name(TransmitResponse_Res_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransmitResponse_Res_Status_descriptor(), value);
}
inline bool TransmitResponse_Res_Status_Parse(
    const ::std::string& name, TransmitResponse_Res_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransmitResponse_Res_Status>(
    TransmitResponse_Res_Status_descriptor(), name, value);
}
// ===================================================================

class MapEntry : public ::google::protobuf::Message {
 public:
  MapEntry();
  virtual ~MapEntry();

  MapEntry(const MapEntry& from);

  inline MapEntry& operator=(const MapEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapEntry& default_instance();

  void Swap(MapEntry* other);

  // implements Message ----------------------------------------------

  MapEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapEntry& from);
  void MergeFrom(const MapEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:transmit.MapEntry)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_transmit_2eproto();
  friend void protobuf_AssignDesc_transmit_2eproto();
  friend void protobuf_ShutdownFile_transmit_2eproto();

  void InitAsDefaultInstance();
  static MapEntry* default_instance_;
};
// -------------------------------------------------------------------

class TransmitRequest : public ::google::protobuf::Message {
 public:
  TransmitRequest();
  virtual ~TransmitRequest();

  TransmitRequest(const TransmitRequest& from);

  inline TransmitRequest& operator=(const TransmitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransmitRequest& default_instance();

  void Swap(TransmitRequest* other);

  // implements Message ----------------------------------------------

  TransmitRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransmitRequest& from);
  void MergeFrom(const TransmitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .transmit.MapEntry values = 1;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline const ::transmit::MapEntry& values(int index) const;
  inline ::transmit::MapEntry* mutable_values(int index);
  inline ::transmit::MapEntry* add_values();
  inline const ::google::protobuf::RepeatedPtrField< ::transmit::MapEntry >&
      values() const;
  inline ::google::protobuf::RepeatedPtrField< ::transmit::MapEntry >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:transmit.TransmitRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::transmit::MapEntry > values_;
  friend void  protobuf_AddDesc_transmit_2eproto();
  friend void protobuf_AssignDesc_transmit_2eproto();
  friend void protobuf_ShutdownFile_transmit_2eproto();

  void InitAsDefaultInstance();
  static TransmitRequest* default_instance_;
};
// -------------------------------------------------------------------

class TransmitResponse : public ::google::protobuf::Message {
 public:
  TransmitResponse();
  virtual ~TransmitResponse();

  TransmitResponse(const TransmitResponse& from);

  inline TransmitResponse& operator=(const TransmitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransmitResponse& default_instance();

  void Swap(TransmitResponse* other);

  // implements Message ----------------------------------------------

  TransmitResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransmitResponse& from);
  void MergeFrom(const TransmitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TransmitResponse_Res_Status Res_Status;
  static const Res_Status SUCCEED = TransmitResponse_Res_Status_SUCCEED;
  static const Res_Status FAILED = TransmitResponse_Res_Status_FAILED;
  static inline bool Res_Status_IsValid(int value) {
    return TransmitResponse_Res_Status_IsValid(value);
  }
  static const Res_Status Res_Status_MIN =
    TransmitResponse_Res_Status_Res_Status_MIN;
  static const Res_Status Res_Status_MAX =
    TransmitResponse_Res_Status_Res_Status_MAX;
  static const int Res_Status_ARRAYSIZE =
    TransmitResponse_Res_Status_Res_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Res_Status_descriptor() {
    return TransmitResponse_Res_Status_descriptor();
  }
  static inline const ::std::string& Res_Status_Name(Res_Status value) {
    return TransmitResponse_Res_Status_Name(value);
  }
  static inline bool Res_Status_Parse(const ::std::string& name,
      Res_Status* value) {
    return TransmitResponse_Res_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .transmit.TransmitResponse.Res_Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::transmit::TransmitResponse_Res_Status status() const;
  inline void set_status(::transmit::TransmitResponse_Res_Status value);

  // optional string error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  inline void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:transmit.TransmitResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* error_;
  int status_;
  friend void  protobuf_AddDesc_transmit_2eproto();
  friend void protobuf_AssignDesc_transmit_2eproto();
  friend void protobuf_ShutdownFile_transmit_2eproto();

  void InitAsDefaultInstance();
  static TransmitResponse* default_instance_;
};
// ===================================================================

class TransmitService_Stub;

class TransmitService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TransmitService() {};
 public:
  virtual ~TransmitService();

  typedef TransmitService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void transmit(::google::protobuf::RpcController* controller,
                       const ::transmit::TransmitRequest* request,
                       ::transmit::TransmitResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TransmitService);
};

class TransmitService_Stub : public TransmitService {
 public:
  TransmitService_Stub(::google::protobuf::RpcChannel* channel);
  TransmitService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~TransmitService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements TransmitService ------------------------------------------

  void transmit(::google::protobuf::RpcController* controller,
                       const ::transmit::TransmitRequest* request,
                       ::transmit::TransmitResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TransmitService_Stub);
};


// ===================================================================


// ===================================================================

// MapEntry

// required string key = 1;
inline bool MapEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapEntry::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& MapEntry::key() const {
  // @@protoc_insertion_point(field_get:transmit.MapEntry.key)
  return *key_;
}
inline void MapEntry::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:transmit.MapEntry.key)
}
inline void MapEntry::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:transmit.MapEntry.key)
}
inline void MapEntry::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:transmit.MapEntry.key)
}
inline ::std::string* MapEntry::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:transmit.MapEntry.key)
  return key_;
}
inline ::std::string* MapEntry::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MapEntry::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:transmit.MapEntry.key)
}

// required string value = 2;
inline bool MapEntry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapEntry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapEntry::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& MapEntry::value() const {
  // @@protoc_insertion_point(field_get:transmit.MapEntry.value)
  return *value_;
}
inline void MapEntry::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:transmit.MapEntry.value)
}
inline void MapEntry::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:transmit.MapEntry.value)
}
inline void MapEntry::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:transmit.MapEntry.value)
}
inline ::std::string* MapEntry::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:transmit.MapEntry.value)
  return value_;
}
inline ::std::string* MapEntry::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MapEntry::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:transmit.MapEntry.value)
}

// -------------------------------------------------------------------

// TransmitRequest

// repeated .transmit.MapEntry values = 1;
inline int TransmitRequest::values_size() const {
  return values_.size();
}
inline void TransmitRequest::clear_values() {
  values_.Clear();
}
inline const ::transmit::MapEntry& TransmitRequest::values(int index) const {
  // @@protoc_insertion_point(field_get:transmit.TransmitRequest.values)
  return values_.Get(index);
}
inline ::transmit::MapEntry* TransmitRequest::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:transmit.TransmitRequest.values)
  return values_.Mutable(index);
}
inline ::transmit::MapEntry* TransmitRequest::add_values() {
  // @@protoc_insertion_point(field_add:transmit.TransmitRequest.values)
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transmit::MapEntry >&
TransmitRequest::values() const {
  // @@protoc_insertion_point(field_list:transmit.TransmitRequest.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::transmit::MapEntry >*
TransmitRequest::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:transmit.TransmitRequest.values)
  return &values_;
}

// -------------------------------------------------------------------

// TransmitResponse

// required .transmit.TransmitResponse.Res_Status status = 1;
inline bool TransmitResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransmitResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransmitResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransmitResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::transmit::TransmitResponse_Res_Status TransmitResponse::status() const {
  // @@protoc_insertion_point(field_get:transmit.TransmitResponse.status)
  return static_cast< ::transmit::TransmitResponse_Res_Status >(status_);
}
inline void TransmitResponse::set_status(::transmit::TransmitResponse_Res_Status value) {
  assert(::transmit::TransmitResponse_Res_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:transmit.TransmitResponse.status)
}

// optional string error = 2;
inline bool TransmitResponse::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransmitResponse::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransmitResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransmitResponse::clear_error() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& TransmitResponse::error() const {
  // @@protoc_insertion_point(field_get:transmit.TransmitResponse.error)
  return *error_;
}
inline void TransmitResponse::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set:transmit.TransmitResponse.error)
}
inline void TransmitResponse::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set_char:transmit.TransmitResponse.error)
}
inline void TransmitResponse::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:transmit.TransmitResponse.error)
}
inline ::std::string* TransmitResponse::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:transmit.TransmitResponse.error)
  return error_;
}
inline ::std::string* TransmitResponse::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TransmitResponse::set_allocated_error(::std::string* error) {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (error) {
    set_has_error();
    error_ = error;
  } else {
    clear_has_error();
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:transmit.TransmitResponse.error)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transmit

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::transmit::TransmitResponse_Res_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::transmit::TransmitResponse_Res_Status>() {
  return ::transmit::TransmitResponse_Res_Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_transmit_2eproto__INCLUDED
